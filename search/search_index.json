{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Thatool Documentation","text":""},{"location":"#thatool","title":"<code>thatool</code>","text":"<p><code>thatool</code> is an OOP Python package for pre- and post-processing data from Molecular Dynamics simulations.</p> <p>This package is developed and maintained by thangckt</p> <p></p> <pre><code>    thatool_package\n    \u2502__ README.md\n    \u2502__ LICENSE.md\n    \u2502__ setup.py\n    \u2502\n    \u2502__ thatool\n        \u2502__ __init__.py\n        \u2502__ data.py\n        \u2502\n        \u2502__ io\n        \u2502   \u2502__ __init__.py\n        \u2502   \u2502__ define_script.py\n        \u2502   \u2502__ LmpFrame.py\n        \u2502   \u2502__ ...\n        \u2502\n        \u2502__ model\n        \u2502   \u2502__ __init__.py\n        \u2502   \u2502__ box_orientation.py\n        \u2502   \u2502__ crystal3D.py\n        \u2502   \u2502__  ...\n        \u2502\n        \u2502__ colvar\n        \u2502   \u2502__ __init__.py\n        \u2502   \u2502__ cv_fccCUBIC.py\n        \u2502   \u2502__ cv_localCRYSTALLINITY.py\n        \u2502   \u2502__ ...\n        \u2502\n        \u2502__ free_energy\n        \u2502   \u2502__ __init__.py\n        \u2502   \u2502__ Helmholtz_excess_UF.py\n        \u2502   \u2502__ replica_logPD_intergration.py\n        \u2502   \u2502__ ...\n        \u2502\n        \u2502__ utils\n        \u2502   \u2502__ __init__.py\n        \u2502   \u2502__ coord_rotation.py\n        \u2502   \u2502__ unit_convert.py\n        \u2502   \u2502__ compute_distance.py\n        \u2502   \u2502__ fitting.py\n        \u2502   \u2502__ ...\n        \u2502\n</code></pre>"},{"location":"colvar/SwitchFunction/","title":"Switching Functions","text":""},{"location":"colvar/SwitchFunction/#thatool.colvar.SwitchFunction","title":"<code>thatool.colvar.SwitchFunction</code>","text":""},{"location":"colvar/SwitchFunction/#thatool.colvar.SwitchFunction.SwitchFunction","title":"<code>SwitchFunction</code>","text":"<p>NOTE: Dmin != D0 D0, R0    : are the parameter of switching function  Dmin, Dmax : are the bounds at which the switching take affect</p>"},{"location":"colvar/SwitchFunction/#thatool.colvar.SwitchFunction.SwitchFunction.RATIONAL","title":"<code>RATIONAL</code>","text":"<p>Create an Object of SWITCHING FUNCTION * Attributes:         swType       : (default='RATIONAL') Type of witching function,          r0, d0       : The r_0 parameter of the switching function         n            : (default=6) The n parameter of the switching function           m            : (default=2*m) The m parameter of the switching function          Dmin, Dmax   : interval in which scaling take effect</p> <ul> <li>Methods:         fFunc    : compute &amp; return value and derivation of sw function         fDmax    : estimate value of Dmax</li> </ul> <p>Ex: sw = thaTool.SwitchFunc(r0=6.3, swType='RATIONAL', d0=0.0, n=10)</p>"},{"location":"colvar/SwitchFunction/#thatool.colvar.SwitchFunction.SwitchFunction.RATIONAL.__init__","title":"<code>__init__(r0, d0 = 0.0, n = 6, m = 12, dmax_tol = 0.001)</code>","text":"<p>create some intiatial attributes...</p>"},{"location":"colvar/SwitchFunction/#thatool.colvar.SwitchFunction.SwitchFunction.RATIONAL.Evaluate","title":"<code>Evaluate(x)</code>","text":"<p>Input x can be a scalar or a 1d numpy ndarray</p>"},{"location":"colvar/SwitchFunction/#thatool.colvar.SwitchFunction.SwitchFunction.HEAVISIDE","title":"<code>HEAVISIDE</code>","text":""},{"location":"colvar/SwitchFunction/#thatool.colvar.SwitchFunction.SwitchFunction.HEAVISIDE.__init__","title":"<code>__init__(r0)</code>","text":"<p>create some intiatial attributes...</p>"},{"location":"colvar/SwitchFunction/#thatool.colvar.SwitchFunction.SwitchFunction.CUBIC","title":"<code>CUBIC</code>","text":""},{"location":"colvar/SwitchFunction/#thatool.colvar.SwitchFunction.SwitchFunction.CUBIC.__init__","title":"<code>__init__(d0, dmax)</code>","text":"<p>create some intiatial attributes...</p>"},{"location":"colvar/SwitchFunction/#thatool.colvar.SwitchFunction.SwitchFunction.SMAP","title":"<code>SMAP</code>","text":""},{"location":"colvar/SwitchFunction/#thatool.colvar.SwitchFunction.SwitchFunction.SMAP.__init__","title":"<code>__init__(r0, a = 8, b = 8, d0 = 0, tol = 0.0001)</code>","text":"<p>create some intiatial attributes...</p>"},{"location":"colvar/colvar/","title":"Collective Variables","text":""},{"location":"colvar/colvar/#thatool.colvar","title":"<code>thatool.colvar</code>","text":"<p>This module contains classes and functions to compute Order parameters, Collective variables,...</p>"},{"location":"colvar/colvar/#thatool.colvar.fccCUBIC","title":"<code>thatool.colvar.fccCUBIC(points, alpha = 27, zDirect = '001', switch_function = None)</code>","text":"<p>Function to Calculate FCC CUBIC parameters.</p> <p>By thangckt, Mar 2020</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>Nx3 np.array</code> <p>array contains bonding vectors between neighboring  atoms j and ref atom i</p> required <code>alpha</code> <code>int</code> <p>coefficient of harmonic function. Default to 27.</p> <code>27</code> <code>zDirect</code> <code>str</code> <p>direction of Z-direction, available '001'  '110'  '111'. Default to '001'.</p> <code>'001'</code> <code>switch_function</code> <code>list</code> <p>list contain values of switching function s(Rj) (Rj is positions of atom j). Default to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>param</code> <code>float</code> <p>Order Parameter.</p> <p>Examples:</p> <pre><code>S = thatool.colvar.fccCUBIC([1,0,0; 0,1,0], alpha=3, zDirect='001', switch_function=sw)\n</code></pre> Note <p>Must choose suitable Rcut for Switching function.</p>"},{"location":"colvar/colvar/#thatool.colvar.localCRYSTALLINITY","title":"<code>thatool.colvar.localCRYSTALLINITY(points, g_vectors = (1, 0, 0), lattice_constant = 1.0, zDirect = '001', switch_function = None)</code>","text":"<p>Function to Calculate Order Parameter with multi_vectors K.</p> <pre><code>By thangckt, Apr 2019\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>Nx3 np.array</code> <p>array contains bonding vectors between neighboring  atoms j and ref atom i     g_vectors (tuple): 2d-tuple contains \"directions_vectors\" for g_vectors  (ex: ((1,0,0), (0,1,0)). The actual g_vectors will be computed in function. Default to ((1,0,0)).     lattice_constant (float): lattice constant of crystal. Default to 1.</p> required <code>zDirect</code> <code>str</code> <p>direction of Z-direction, available '001'  '110'  '111'. Default to '001'.</p> <code>'001'</code> <code>switch_function</code> <code>list</code> <p>list contain values of switching function s(Rj) (Rj is positions of atom j). Default to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>aveLC</code> <code>float</code> <p>is average Order Parameter , tage over on input g_factors, 0 &lt;= LC &lt;=1</p> <code>LC</code> <code>list</code> <p>list of real numbers, are Order Parameters corresponding to each g-vector 0 &lt;= LC &lt;=1</p> <code>S</code> <code>list</code> <p>(not computed) Kx1 vetor of complex numbers, are Static Structure Factors corresponding to each g-vector</p> <pre><code>Examples:\n```py\nS = thatool.colvar.localCRYSTALLINITY([1,0,0; 0,1,0], switch_function=sw, zDirect='001')\n```\n\n???+ note\nIf multi g-vectors is input, then OrderPara is take by averaging over all g-vectors.\n</code></pre>"},{"location":"colvar/colvar/#thatool.colvar.coord_number","title":"<code>thatool.colvar.coord_number(Points, **kwargs)</code>","text":"<p>The Coordination is the size of input \"Points\", this function just weight it with a switching function  * Compulsory Inputs: ** optional Inputs:         switchFunc=[1,1...,1] : Nx1 array, contain values of switching function s(Rj) (Rj is positions of atom j) * Output:              coord  : scalar, Order Parameter     Example: S = thaTool.OrderPara.Coordination([1,0,0; 0,1,0], SW=sw) By Cao Thang, Aug 2020</p>"},{"location":"colvar/find_neighbors/","title":"Find neighbors","text":""},{"location":"colvar/find_neighbors/#thatool.colvar.find_neighbors","title":"<code>thatool.colvar.find_neighbors</code>","text":""},{"location":"colvar/find_neighbors/#thatool.colvar.find_neighbors.find_neighbors_gen","title":"<code>find_neighbors_gen(P, box, bound_cond = [1, 1, 1], cutoff_neighbor = None, k_neighbor = None, k_cutoff = 20, keep_ref = False)</code>","text":"<p>find Nearest_Neighbors, return generator of Nearest_IDs, \"Nearest relative-Position vetors from atom i\" Ver 2: spatial.cKDTree</p> <p>thangckt, Sep 2019.     Update: Aug 2022 to use generator</p> <p>Parameters:</p> Name Type Description Default <code>P</code> <code>np.array</code> <p>Nx3 array contain positions of atoms</p> required <code>box</code> <code>np.array</code> <p>simulation box</p> required <code>bound_cond</code> <code>list</code> <p>boundary condition</p> <code>[1, 1, 1]</code> <code>cutoff_neighbor</code> <code>float</code> <p>find neighbors within a Cutoff.</p> <code>None</code> <code>k_neighbor</code> <code>int</code> <p>find k nearest neighbors</p> <code>None</code> <code>keep_ref</code> <code>bool</code> <p>include referal-atom in result</p> <code>False</code> <p>Returns:</p> Name Type Description <code>obj</code> <code>generator</code> <p>this output a GEN contains (Idx_neigh, Rij_vectors)</p> <p>Examples:</p> <pre><code>GEN = colvar.find_neighbors_gen(P, box, bound_cond = [1, 1, 1], cutoff_neighbor=9, keep_ref=False)\n</code></pre> <p>Notes         <pre><code>access items in generator with:\n        for Near_ID, Rij_vector in GEN:\n                print (Near_ID, Rij_vector)\n\n- Idx_neigh    : Nx1 list of Mx1-vectors, contain Image_IDs(id of the original atoms before make periodicity) of Nearest atoms\n- Rij_vectors : Nx1 list of Mx3-Matrices, contain Nearest Rij relative-Position vetors from Ref.atom i (Nearest Positions)\n</code></pre></p>"},{"location":"colvar/find_neighbors/#thatool.colvar.find_neighbors.find_neighbors_list","title":"<code>find_neighbors_list(P, box, bound_cond = [1, 1, 1], cutoff_neighbor = None, k_neighbor = None, k_cutoff = 20, keep_ref = False)</code>","text":"<p>find Nearest_Neighbors, return list of Nearest_IDs, \"Nearest relative-Position vetors from atom i\" Ver 2: spatial.cKDTree</p> <p>thangckt, Sep 2019.</p> <p>Parameters:</p> Name Type Description Default <code>P</code> <code>np.array</code> <p>Nx3 array contain positions of atoms</p> required <code>box</code> <code>np.array</code> <p>simulation box</p> required <code>bound_cond</code> <code>list</code> <p>boundary condition</p> <code>[1, 1, 1]</code> <code>cutoff_neighbor</code> <code>float</code> <p>find neighbors within a Cutoff.</p> <code>None</code> <code>k_neighbor</code> <code>int</code> <p>find k nearest neighbors</p> <code>None</code> <code>keep_ref</code> <code>bool</code> <p>include referal-atom in result</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Idx_neigh</code> <code>np.array</code> <p>Nx1 list of Mx1-vectors, contain Image_IDs(id of the original atoms before make periodicity) of Nearest atoms</p> <code>Rij_vectors</code> <code>np.array</code> <p>Nx1 list of Mx3-Matrices, contain Nearest Rij relative-Position vetors from Ref.atom i (Nearest Positions)</p> <p>Examples:</p> <pre><code>Idx_neigh, Rij_vectors = colvar.find_neighbors_list(P, box, bound_cond = [1, 1, 1], cutoff_neighbor=9, keep_ref=False)\n</code></pre> <p>Note<ul> <li>don't compute Rij_Bond to save memory</li> <li>Rij_Bonds (np.array): Nx1 list of scalars, contain Rij_bonds from Ref.atom to Nearest_atoms (Nearest-bonds)</li> </ul> </p>"},{"location":"colvar/surface_extractor/","title":"Surface extractor","text":""},{"location":"colvar/surface_extractor/#thatool.colvar.layer_extractor","title":"<code>thatool.colvar.layer_extractor(P, bound_cond = (1, 1, 0), layer_num = 1, max_edge = 3.0, surf_deep = 15, method = 'max_face_perimeter')</code>","text":"<p>Extract atoms of outermost layers, based on Voronoi analysis * Input:           P   : Nx3 Matrix contain positions of atoms           bound_cond=(1, 1, 0)  : tuple of boundary condtions           layer_num   : number of Layers need to extract (layer_num=0 will extract all layers)           max_edge  : value to to compute face-area = max_edge**2           surf_deep : = max(peak) - min(valey), unit in Angstrom, use to reduce input data to save memory           method   : 'max_face_perimeter'  or   'max_face_area' * Output:           hiLayerIndex, loLayerIndex: list of lists (1xM index of atoms in each layer) By Cao Thang, Jan 2020</p>"},{"location":"colvar/surface_extractor/#thatool.colvar.surface_detect","title":"<code>thatool.colvar.surface_detect(P, bound_cond = (1, 1, 0), max_edge = 3.0, surf_deep = 15, method = 'max_face_perimeter')</code>","text":"<p>Extract atoms on free surface, are atoms have Voronoi with max(faceArea) &gt;= max_edge**2 * Input:           P   : Nx3 Matrix contain positions of atoms           bound_cond=(1, 1, 0)  : tuple of boundary condtions           max_edge  : value to to compute face-area = max_edge**2           surf_deep : = max(peak) - min(valey), unit in Angstrom, use to reduce input data to save memory           method   : 'max_face_perimeter'  or   'max_face_area' * Output:           hiSurIndex, loSurIndex: 1xM array, index of surface atoms in the original input points  </p> <ul> <li>NOTE: - experimental choose: max_edge=0.73*latticeConst                 - only 1 pair of surface is detect each time By Cao Thang, Oct 2019</li> </ul>"},{"location":"colvar/voronoi_analysis/","title":"Voronoi Analysis","text":""},{"location":"colvar/voronoi_analysis/#thatool.colvar.Voro3D","title":"<code>thatool.colvar.Voro3D</code>","text":"<p>Voro ++ library * Attributes:</p> <ul> <li>Methods:         fAtomicVol_Bulk    : return atomicVol, coord of bulk model         fAtomicVol_Plate   : return atomicVol, coord of plate model By Cao Thang, updated: Jan 2020</li> </ul>"},{"location":"colvar/voronoi_analysis/#thatool.colvar.voronoi_analysis.Voro3D.fAtomicVol_Bulk_gen","title":"<code>fAtomicVol_Bulk_gen(P, box, coord_number = False)</code>","text":"<p>compute atomic-volume of each atom in Bulk models * Input:         P        : Nx3 Matrix contain positions of atoms         box      : simulation box **Optional:         coord_number=False : compute coordiation number * Output:           atomicVol            : 1xM array of atomic volume          coord, cell_neighbor : 1xN list, Nxlist index of neighbors of each atom in original input points</p> gen2 = thaTool.fAtomicVol_Bulk_gen(P, box, coord_number=False)   # gen2 = (tomicVol_i, cell_neighbor_i) <p>gen3 = thaTool.fAtomicVol_Bulk_gen(P, box, coord_number=True)    # gen3 = (tomicVol_i, cell_neighbor_i, coord_i)</p>"},{"location":"colvar/voronoi_analysis/#thatool.colvar.voronoi_analysis.Voro3D.fAtomicVol_Plate_gen","title":"<code>fAtomicVol_Plate_gen(P, box, bound_cond = (1, 1, 0), max_edge = 3.1, surf_deep = 15, virtual_surface = True, offset = False, coord_number = False)</code>","text":"<p>compute atomic-volume of each atom in Plate models update Ver2: copy layer 2nd and 3rd to cover free surface, offset distance = inter-layer distance. So, no need to input offset value * Input:         P        : Nx3 Matrix contain positions of atoms         box   : simulation box</p> <p>**Optional:         bound_cond=(1, 1, 0)  : tuple of boundary condtions         max_edge=3.1 : value to to compute face-area = max_edge**2         surf_deep=15 : = max(peak) - min(valey), unit in Angstrom, use to reduce input data to save memory         virtual_surface=True  : apply virtual surface to cover real surface before compute Voronoi                 + offset=False: extract 2 layers near outmost layer, and use to cover surface, offset_distance is auto computed based on atomic arrangement                 + offset=true: extract 1 layer near outmost layer, and use to cover surface with offset_distance = offset value         coord_number=False : compute coordiation number * Output:           atomicVol            : 1xM array of atomic volume          coord, cell_neighbor : 1xN list, Nxlist index of neighbors of each atom in original input points</p>"},{"location":"colvar/voronoi_analysis/#thatool.colvar.voronoi_analysis.Voro3D.fAtomicVol_Bulk","title":"<code>fAtomicVol_Bulk(P, box, coord_number = False)</code>","text":"<p>compute atomic-volume of each atom in Bulk models * Input:         P        : Nx3 Matrix contain positions of atoms         box      : simulation box **Optional:         coord_number=False : compute coordiation number * Output:           atomicVol            : 1xM array of atomic volume          coord, cell_neighbor : 1xN list, Nxlist index of neighbors of each atom in original input points</p>"},{"location":"colvar/voronoi_analysis/#thatool.colvar.voronoi_analysis.Voro3D.fAtomicVol_Plate","title":"<code>fAtomicVol_Plate(P, box, bound_cond = (1, 1, 0), max_edge = 3.1, surf_deep = 15, virtual_surface = True, offset = False, coord_number = False)</code>","text":"<p>compute atomic-volume of each atom in Plate models update Ver2: copy layer 2nd and 3rd to cover free surface, offset distance = inter-layer distance. So, no need to input offset value * Input:         P        : Nx3 Matrix contain positions of atoms         box   : simulation box</p> <p>**Optional:         bound_cond=(1, 1, 0)  : tuple of boundary condtions         max_edge=3.1 : value to to compute face-area = max_edge**2         surf_deep=15 : = max(peak) - min(valey), unit in Angstrom, use to reduce input data to save memory         virtual_surface=True  : apply virtual surface to cover real surface before compute Voronoi                 + offset=False: extract 2 layers near outmost layer, and use to cover surface, offset_distance is auto computed based on atomic arrangement                 + offset=true: extract 1 layer near outmost layer, and use to cover surface with offset_distance = offset value         coord_number=False : compute coordiation number * Output:           atomicVol            : 1xM array of atomic volume          coord, cell_neighbor : 1xN list, Nxlist index of neighbors of each atom in original input points</p>"},{"location":"free_energy/Helmholtz_excess_UF/","title":"Helmholtz_excess_UF","text":""},{"location":"free_energy/Helmholtz_excess_UF/#thatool.free_energy.Helmholtz_excess_UF","title":"<code>thatool.free_energy.Helmholtz_excess_UF</code>","text":""},{"location":"free_energy/Helmholtz_excess_UF/#thatool.free_energy.Helmholtz_excess_UF.Helmholtz_excess_UF","title":"<code>Helmholtz_excess_UF(p, x)</code>","text":"<p>this func. is to compute the excess Helmholtz freeEnergy as Eq.(25) by R.Paula Leite 2016. J.Chem.Phys.145,no.19:194101. https://doi.org/10.1063/1.4967775.                         p  :           # UFM p-parameter                         x = b*rho  :   # adimensional variable, involved UFM-sigma parameter, rho in unit [1/A^3]</p> <ol> <li>the excess_Helmholtz free enegy in eV : (beta*Fexc)/N</li> </ol> <ol> <li>the pressure : beta*b*P</li> </ol>"},{"location":"free_energy/replica_MD_average/","title":"replica_MD_average","text":""},{"location":"free_energy/replica_MD_average/#thatool.free_energy.replica_MD_average","title":"<code>thatool.free_energy.replica_MD_average</code>","text":""},{"location":"free_energy/replica_MD_average/#thatool.free_energy.replica_MD_average.replica_MD_average","title":"<code>replica_MD_average(MD_out_files)</code>","text":"<p>compute Replica_MD_Average from output of MD. Requisites: 1. Replica_* files from separate MD simulations</p> <ul> <li>Inputs-Compulsory:          - MD_out_files: |<code>list</code>| of \"MDout_replica.txt\" files</li> <li>Outputs:          - logPD file: contains logPD-based MeanForce</li> <li>Usage:          thaFreeEnergy.replica_MD_average(MD_out_files)</li> </ul> <p>Cao Thang, Jul2020 (update: Sep 2021)</p>"},{"location":"free_energy/replica_SteerMD/","title":"replica_SteerMD","text":""},{"location":"free_energy/replica_SteerMD/#thatool.free_energy.replica_SteerMD","title":"<code>thatool.free_energy.replica_SteerMD(SteerMD_files, beta = 1.0, engine = 'Lammps')</code>","text":"<p>compute Average Work from output of SteerMD.</p> [1]. https://github.com/sandeshkalantre/jarzynski/blob/master/code/Simulations%20on%20Harmonic%20Oscillator%20Model.ipynb <p>[2]. https://www.plumed.org/doc-v2.6/user-doc/html/belfast-5.html#belfast-5-work [3] Exp-normalize trick: https://timvieira.github.io/blog/post/2014/02/11/exp-normalize-trick/</p> <p>Requisites: 1. Replica_* files from separate MD simulations</p> <pre><code>* Inputs-Compulsory: &lt;br&gt;\n- SteerMD_files: |`list`| of \"SteerMD.txt\" files\n- beta = 1.0/(TEMP*kB):  kB is Boltzmann constant (can be set to 1.0, regardless of kB unit)\n- engine='LAMMPS'/'PLUMED'\n* Outputs: &lt;br&gt;\n- aveSteerMD file: contains logPD-based MeanForce\n* Usage: &lt;br&gt;\nthaFreeEnergy.replica_SteerMD_average(SteerMD_files)\n</code></pre> <p>Cao Thang, Jul2020 (update: Mar 2022)</p>"},{"location":"free_energy/replica_logPD_integration/","title":"replica_logPD_integration","text":""},{"location":"free_energy/replica_logPD_integration/#thatool.free_energy.replica_logPD_integration","title":"<code>thatool.free_energy.replica_logPD_integration</code>","text":""},{"location":"free_energy/replica_logPD_integration/#thatool.free_energy.replica_logPD_integration.replica_logPD_integration","title":"<code>replica_logPD_integration(logmfd_files, replica_files, beta = 1.0)</code>","text":"<p>The function to compute LogPD-based MeanForce @thangckt, 2020 Jul (updated: 2021 Sep)</p> <pre><code>            cumulative_trapezoid:np.float64 = cumulative_trapezoid,   # this to specify `type` for function `cumulative_trapezoid`\nlogMFD:pd.DataFrame = read_data.logMFD,\nmatrix_auto:pd.DataFrame = read_data.matrix_auto):\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>logmfd_files</code> <code>list</code> <p>list of \"logmfd.out\" files</p> required <code>replica_files</code> <code>list</code> <p>list of \"replica.out\" files</p> required <code>beta</code> <code>float</code> <p>kB is Boltzmann constant (can be set to 1.0, regardless of kB unit) beta = 1.0/(TEMP*kB)</p> <code>1.0</code> <p>Returns:</p> Name Type Description <code>file</code> <code>obj</code> <p>contains logPD-based MeanForce</p> <p>Examples:</p> <pre><code>        free_energy.replica_logPD_intergration(logmfd_files, replica_files)\n</code></pre> <p>Requisites<ol> <li>Run logMFD simulations to produce \"replica_/logmfd.out\" and \"replica_/replica.out\"</li> </ol> <pre><code>&lt;logmfd.out&gt;\n1:iter_md, 2:Flog(t), \u2026, 6: X(t), 7: V(t), 8: Force(t)\n1   F(1), \u2026, X(1), V(1), Force(0)\n2   F(3), \u2026, X(2), V(2), Force(1)\n\n&lt;replica.out&gt;\niter_md, work, weight, cv\n1  work(1)   weight(1)  cv(0)\n2  work(2)   weight(2)  cv(1)\n</code></pre> </p> <p>Refs:<p>[1].https://pubs.acs.org/doi/10.1021/acs.jctc.7b00252 Free Energy Reconstruction from Logarithmic Mean-Force Dynamics Using Multiple Nonequilibrium TrajectoriesFree [2] Exp-normalize trick: https://timvieira.github.io/blog/post/2014/02/11/exp-normalize-trick/</p> </p> <p>Note<ul> <li>About the printed values in  and  as in emails replied by Tetsuya Morishita. (check thangckt email) <li>Specify type of function <code>cumulative_trapezoid:np.float64</code> to be used in <code>numba</code></li>"},{"location":"io/","title":"File IO","text":""},{"location":"io/#thatool.io","title":"<code>thatool.io</code>","text":"<p>This module contains classes and functions to read/write data in various formats.</p>"},{"location":"io/Lmp_Ave_Chunk/","title":"Block Data","text":""},{"location":"io/Lmp_Ave_Chunk/#thatool.io.LmpAveChunk","title":"<code>thatool.io.LmpAveChunk</code>","text":"<p>class to read Radial Distribution Fuction (RDF) file from Lammps compute</p> <p>Attributes:</p> Name Type Description <code>file_name</code> <code>str</code> <p>file name.</p> <code>frame</code> <code>pd.DataFrame</code> <p>3d pandas Frame (multi-row-index DataFrame).</p> Methods <p>ReadRDF       : read RDF file AverageRDF    : the Average RDF</p>"},{"location":"io/Lmp_Ave_Chunk/#thatool.io.read_block.LmpAveChunk.__init__","title":"<code>__init__(file_name)</code>","text":"<p>initiate object</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>file_name</p> required <p>Returns:</p> Name Type Description <code>Obj</code> <code>LmpAveChunk</code> <p>LmpAveChunk object</p> <p>Examples: <pre><code>RDF = LmpAveChunk('LmpAveChunk.txt')\n</code></pre></p>"},{"location":"io/Lmp_Ave_Chunk/#thatool.io.read_block.LmpAveChunk.read_AveChunk","title":"<code>read_AveChunk(file_name)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>input RDF file</p> required <p>Returns:</p> Name Type Description <code>Obj</code> <code>LmpAveChunk</code> <p>LmpAveChunk object</p>"},{"location":"io/Lmp_Ave_Chunk/#thatool.io.read_block.LmpAveChunk.compute_AveChunk","title":"<code>compute_AveChunk()</code>","text":"<p>compute average of RDF over all frames</p> <p>Returns:          df (DataFrame): Average of RDF</p>"},{"location":"io/Lmp_Log_File/","title":"Block Data","text":""},{"location":"io/Lmp_Log_File/#thatool.io.LmpLogFile","title":"<code>thatool.io.LmpLogFile</code>","text":"<p>Create an Object of LOG file.</p> <p>Attributes:</p> Name Type Description <code>mpi_break</code> <code>list</code> <p>list of pd.Dataframe</p> <code>total_time</code> <code>float</code> <p>total runtime.</p> Methods <p>read_log: read LOG file</p> <p>Notes, run 0 without data</p>"},{"location":"io/Lmp_Log_File/#thatool.io.read_block.LmpLogFile.__init__","title":"<code>__init__(logfile = None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>logfile</code> <code>str</code> <p>file_name of LOG file</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Obj</code> <code>LmpLogFile</code> <p>LmpLogFile object</p>"},{"location":"io/Lmp_Log_File/#thatool.io.read_block.LmpLogFile.read_log","title":"<code>read_log(logfile)</code>","text":"<p>Read LAMMPS logfile Args:          logfile (str): input LOG file</p> <p>Returns:</p> Name Type Description <code>Obj</code> <code>LmpLogFile</code> <p>LmpLogFile object</p>"},{"location":"io/Lmp_RDF/","title":"Block Data","text":""},{"location":"io/Lmp_RDF/#thatool.io.LmpRDF","title":"<code>thatool.io.LmpRDF</code>","text":"<p>class to read Radial Distribution Fuction (RDF) file from Lammps compute</p> <p>Attributes:</p> Name Type Description <code>file_name</code> <code>str</code> <p>file name</p> <code>frame</code> <code>pd.DataFrame</code> <p>3d pandas Frame (multi-row-index DataFrame)</p> Methods <p>ReadRDF       : read RDF file AverageRDF    : the Average RDF</p>"},{"location":"io/Lmp_RDF/#thatool.io.read_block.LmpRDF.__init__","title":"<code>__init__(file_name)</code>","text":"<p>initiate object</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>file_name</p> required <p>Returns:</p> Name Type Description <code>Obj</code> <code>LmpAveChunk</code> <p>LmpAveChunk object</p> <p>Examples:</p> <pre><code>RDF = LmpAveChunk('rdf.txt')\n</code></pre>"},{"location":"io/Lmp_RDF/#thatool.io.read_block.LmpRDF.read_RDF","title":"<code>read_RDF(file_name)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>input RDF file</p> required <p>Returns:</p> Name Type Description <code>Obj</code> <code>LmpRDF</code> <p>LmpRDF object</p>"},{"location":"io/Lmp_RDF/#thatool.io.read_block.LmpRDF.compute_AveRDF","title":"<code>compute_AveRDF()</code>","text":"<p>compute average of RDF over all frames</p> <p>Returns:          df (pd.DataFrame): Average of RDF</p>"},{"location":"io/Plum_Histogram/","title":"Block Data","text":""},{"location":"io/Plum_Histogram/#thatool.io.PlumHistogram","title":"<code>thatool.io.PlumHistogram</code>","text":"<p>Create an Object of DUMP file</p> Methods <p>read_histogram       : read Histogram file average_histogram    : the Average Histogram AreaHisto       : Area under pdf curve find_tail()     : find limit of histogram find_center()   : find center of histogram</p> <p>Examples: <pre><code>RDF = thaFileType.PlumHistogram(file_name='myRDF.txt')\n</code></pre></p>"},{"location":"io/Plum_Histogram/#thatool.io.read_block.PlumHistogram.__init__","title":"<code>__init__(file_name)</code>","text":"<p>initiate object</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>file_name</p> required <p>Returns:</p> Name Type Description <code>Obj</code> <code>PlumHistogram</code> <p>PlumHistogram object</p>"},{"location":"io/Plum_Histogram/#thatool.io.read_block.PlumHistogram.read_histogram","title":"<code>read_histogram(file_name)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>file_name</code> <code> </code> <p>input HISTOGRAM file</p> required <p>Returns:</p> Name Type Description <code>Obj</code> <code>PlumHistogram</code> <p>update PlumHistogram object</p>"},{"location":"io/Plum_Histogram/#thatool.io.read_block.PlumHistogram.compute_average_histogram","title":"<code>compute_average_histogram()</code>","text":"<p>compute average of histogram over all frames</p> <p>Returns:</p> Name Type Description <code>df</code> <code>pd.DataFrame</code> <p>DataFrame of avergave histogram</p>"},{"location":"io/Plum_Histogram/#thatool.io.read_block.PlumHistogram.fit_std_gaussian","title":"<code>fit_std_gaussian()</code>","text":"<p>Fit the average-histogarm to Standard Gaussian function</p> <p>Returns:</p> Type Description <code>amp, miu, sigma) (tuple</code> <p>parameters of Gaussian function</p>"},{"location":"io/Plum_Histogram/#thatool.io.read_block.PlumHistogram.find_tail","title":"<code>find_tail(tol = 0.0001, gridSize = 1e-06)</code>","text":"<p>Find tail of distribution function</p> <p>Parameters:</p> Name Type Description Default <code>tol</code> <code>float</code> <p>tolerance</p> <code>0.0001</code> <code>gridSize</code> <code>float</code> <p>size of grid</p> <code>1e-06</code> <p>Returns:</p> Name Type Description <code>left_tail</code> <code>float</code> <p>limit on the left side</p> <code>right_tail</code> <code>float</code> <p>limit on the right side</p>"},{"location":"io/Plum_Histogram/#thatool.io.read_block.PlumHistogram.find_center","title":"<code>find_center(gridSize = 1e-06)</code>","text":"<p>Find tail of distribution function</p> <p>Parameters:</p> Name Type Description Default <code>gridSize</code> <code>float</code> <p>size of grid</p> <code>1e-06</code> <p>Returns:</p> Name Type Description <code>Xcenter</code> <code>float</code> <p>center of the distribution function</p>"},{"location":"io/Traj_Frame/","title":"Trajectories Data","text":""},{"location":"io/Traj_Frame/#thatool.io.TrajFrame","title":"<code>thatool.io.TrajFrame</code>","text":"<p>Create an Object for a single-FRAME of trajectories from MD simulation.</p> <p>This class create a data-object (single configuration) for the analysis of computing data from LAMMPS. The file formats implemented in this class</p> <p></p> <ul> <li>LAMMPS DATA Format</li> <li>LAMMPS DUMP Format</li> <li>PDB format</li> <li>XYZ format</li> </ul> <p>This class implemented several ways to create <code>TrajFrame</code> object</p> <ul> <li>create an empty data object</li> <li>create_DATA object with input data</li> <li>read from DUMP file</li> <li>read from DATA file</li> <li>read frome PDB file</li> </ul> <p>Attributes:</p> Name Type Description <code>filename</code> <code>str</code> <p>name of input file</p> <code>timestep</code> <code>int</code> <p>the timestep of configuration</p> <code>box</code> <code>np.array</code> <p>3x2 array, the box size</p> <code>box_angle</code> <code>np.array</code> <p>1x3 array, the box angle</p> <code>atom</code> <code>pd.DataFrame</code> <p>DataFrame of per-atom values</p> <code>prop_key</code> <code>list</code> <p>column-names of properties</p> <code>mass</code> <code>pd.DataFrame</code> <p>DataFrame of per-type masses</p> <code>FMTstr</code> <code>str</code> <p>default format for float numbers, don't use %g because it will lost precision</p> <p>Examples:</p> <pre><code>from thatool.io  import TrajFrame\nda = TrajFrame()                        # empty object\nda = TrajFrame(from_df=df)              # oject with input data\nda = TrajFrame(dump_file='test.cfg')    # from DUMP file\nda = TrajFrame(data_file='mydata.dat')  # from DATA file\nda = TrajFrame(pdb_file='test.pdb')     # from PDB file\n</code></pre> Methods: <pre><code>create_DATA (TrajFrame): create an obj from artificial data.\n</code></pre> Refs: <pre><code>[1]. [Use chain mutator calls](https://stackoverflow.com/questions/36484000/use-an-object-method-with-the-initializer-same-line)\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.__init__","title":"<code>__init__(dump_file = None, data_file = None, atom_style = 'auto', pdb_file = None, xyz_file = None, from_df = None, box = None, box_angle = None)</code>","text":"<p>initilize the TrajFrame object</p> <p>Parameters:</p> Name Type Description Default <code>dump_file</code> <code>str</code> <p>filename of DUMP file. </p> <code>None</code> <code>data_file</code> <code>str</code> <p>filename of DATA file. </p> <code>None</code> <code>pdb_file</code> <code>str</code> <p>filename of PBD file. </p> <code>None</code> <code>xyz_file</code> <code>str</code> <p>filename of XYZ file. </p> <code>None</code> <code>from_df</code> <code>pd.DataFrame</code> <p>create FRAME from data. </p> <code>None</code> <code>atom_style</code> <code>str</code> <p>atom_style of system. Only need when <code>data_file</code> is used. Possible values: 'atomic', 'molecular', 'charge', 'full', 'auto'</p> <code>'auto'</code> <code>box</code> <code>np.array list</code> <p>Define simulation box. Only need when <code>from_df</code> is used.</p> <code>None</code> <code>box_angle</code> <code>np.array list</code> <p>Define angle of simulation box. Only need when <code>from_df</code> is used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>object of trajectories</p> <p>???+ Notes:         Use mutator, so do not use self.* when define value</p>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.create_DATA","title":"<code>create_DATA(DataFrame, box = None, box_angle = None)</code>","text":"<p>The method to create new FRAME object with input data.</p> <p>Parameters:</p> Name Type Description Default <code>DataFrame</code> <code>pd.DataFrame</code> <p>of input data</p> required <code>box</code> <code>np.array</code> <p>3x2 array, option to input boxSize. </p> <code>None</code> <code>box_angle</code> <code>np.array</code> <p>1x3 array, option to input box_angle. </p> <code>None</code> <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>update TrajFrame</p> <p>Examples:</p> <pre><code>        da = TrajFrame()\nda.create_DATA(DataFrame=df)\n# or\nda = TrajFrame(from_df=df)\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.read_DATA","title":"<code>read_DATA(filename, atom_style = 'auto')</code>","text":"<p>The method to create FRAME object by reading DATA file. The style of atomistic system.The format of \"data file\" depend on the definition of \"atom_style\". See list of atom_style format. Can be detected automatically, or explicitly setting                 - atomic      : atom-ID atom-type x y z                 - charge      : atom-ID atom-type q x y z                 - molecular   : atom-ID molecule-ID atom-type x y z                 - full        : atom-ID molecule-ID atom-type q x y z Full lammps_data format</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>name of input file</p> required <code>atom_style</code> <code>str</code> <p>option to choose atom_style. Defaults to 'auto'.</p> <code>'auto'</code> <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>update FRAME</p> <p>Examples:</p> <pre><code>        da = TrajFrame(data_file='mydata.dat')\n</code></pre> <p>???+ Notes:         imgFlag: is auto detected         <pre><code>        np.char.split(C[index]).tolist()              return \"object\"\n        np.char.split(C[index]).tolist()              return list\n        np.char.split(C[index1:idx_vel]).tolist()     return list-of-lists (2d list)\n</code></pre></p>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.read_DUMP","title":"<code>read_DUMP(filename)</code>","text":"<p>The method to create FRAME object by reading DUMP file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>name of input file</p> required <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>update FRAME</p> <p>Examples:</p> <pre><code>        da = TrajFrame()\nda.read_DUMP(DataFrame=df)\n# or\nda = TrajFrame(dump_file='mydata.cfg')\n</code></pre> <p>???+ Notes:         use list comprehension in code to get better performance</p>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.read_PDB","title":"<code>read_PDB(filename)</code>","text":"<p>The method to create FRAME object by reading PDB file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>name of input file</p> required <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>update FRAME record_name (str): atom_symbol (str): same as column 'type' in DUMP format residue_name (str): residue_id (int): chain (str): occupancy (float): beta (float):</p> <p>Examples:</p> <pre><code>da = TrajFrame(pdb_file='mydata.pdb')\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.read_XYZ","title":"<code>read_XYZ(filename)</code>","text":"<p>The method to create FRAME object by reading XYZ file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>name of input file</p> required <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>update FRAME</p> <p>Examples:</p> <pre><code>da = TrajFrame(pdb_file='mydata.pdb')\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.write_DATA","title":"<code>write_DATA(filename, atom_style = 'atomic', ignore_vel = False, ignore_imgFlag = False, ignore_pair_coeff = False, comment_line = '', FMTstr = '%.6f')</code>","text":"<p>The method to write DATA file. DATA format</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>name of input file</p> required <code>atom_style</code> <code>str</code> <p>the style of atomistic system, can be 'atomic', 'charge', 'molecular', 'full' . Defaults to 'atomic'.</p> <code>'atomic'</code> <code>ignore_vel</code> <code>bool</code> <p>to write Velocity values. </p> <code>False</code> <code>ignore_imgFlag</code> <code>bool</code> <p>to write imgFlag tag. </p> <code>False</code> <code>ignore_pair_coeff</code> <code>bool</code> <p>ignore pair-coeff when write data. </p> <code>False</code> <code>comment_line</code> <code>str</code> <p>comment on second line in DATA file. Defaults to ''.</p> <code>''</code> <code>FMTstr</code> <code>str</code> <p>string format for output values. Defaults to None, mean use self._FMT</p> <code>'%.6f'</code> <p>Returns:</p> Name Type Description <code>file</code> <code>obj</code> <p>the DUMP file</p> <p>Examples:</p> <pre><code>da.write_DATA('test.dat', atom_style='atomic', ignore_imgFlag=False, ignore_vel=False, FMT='%.4f')\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.write_DUMP","title":"<code>write_DUMP(filename, column = None, FMTstr = None)</code>","text":"<p>The method to write DUMP file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>name of input file</p> required <code>column</code> <code>list</code> <p>list-of-str contains columns to be written. Defaults to None, mean all columns will be written</p> <code>None</code> <code>FMTstr</code> <code>str</code> <p>string format for output values. Defaults to None, mean use self._FMT</p> <code>None</code> <p>Returns:</p> Name Type Description <code>file</code> <code>obj</code> <p>the DUMP file</p> <p>Examples:</p> <pre><code>da.write_DUMP('test.cfg', column=['id','type','x','y','z'], FMTstr='%.4f')\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.write_XYZ","title":"<code>write_XYZ(filename, column = ['X', 'xu', 'yu', 'zu'], FMTstr = None)</code>","text":"<p>The <code>method</code> to write XYZ file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>name of input file</p> required <code>column</code> <code>list</code> <p>list-of-str contains columns to be written. Defaults to ['X','xu','yu','zu']</p> <code>['X', 'xu', 'yu', 'zu']</code> <code>FMTstr</code> <code>str</code> <p>string format for output values. Defaults to None, mean use self._FMT</p> <code>None</code> <p>Returns:</p> Name Type Description <code>file</code> <code>obj</code> <p>the XYZ file</p> <p>Examples:</p> <pre><code>da.write_XYZ('test.xyz')\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.write_PDB","title":"<code>write_PDB(filename, writeBox = False)</code>","text":"<p>The method to write PDB file</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>name of input file</p> required <code>writeBox</code> <code>bool</code> <p>write box or not. </p> <code>False</code> <p>Returns:</p> Name Type Description <code>file</code> <code>obj</code> <p>the PDB file</p> <p>Examples:</p> <pre><code>da.write_PDB('test.pdb')\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.add_column","title":"<code>add_column(data, newColumn = None, replace = False)</code>","text":"<p>The method to add new columns to da.atom.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>pd.DataFrame pd.Series list</code> <p>Nxm data of new columns</p> required <code>newColumn</code> <code>list</code> <p>1xN list contains names of columns. Default to None, mean it will take columnNames from DataFrame</p> <code>None</code> <code>replace</code> <code>bool</code> <p>replace column if existed. </p> <code>False</code> <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>Update da.atom</p> <p>Examples:</p> <pre><code>da.add_column(df, myColumn=['col1','col2'], replace=True)\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.delete_column","title":"<code>delete_column(delColumns)</code>","text":"<p>The method to delete columns from da.atom.</p> <p>Parameters:</p> Name Type Description Default <code>delColumns</code> <code>list</code> <p>1xN list contains names of columns to be deleted.</p> required <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>Update da.atom</p> <p>Examples:</p> <pre><code>da.delete_column(delColumns=['col1','col2'])\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.set_mass","title":"<code>set_mass(element_dict)</code>","text":"<p>The method to set masses of atoms in system. Before use it, need to define element_dict with 2 keys: 'type', 'atom_symbol'         element_dict={'type': list_values, 'atom_symbol':list_values}</p> <p>Parameters:</p> Name Type Description Default <code>element_dict</code> <code>dict</code> <p>a dict to define atom-types and atom-symbols.</p> required <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>Update da.atom</p> <p>Examples:</p> <pre><code>da.set_mass(element_dict={'type':[1,2,3], 'atom_symbol':['C','H','N']})\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.combine_frame","title":"<code>combine_frame(TrajFrame, merge_type = False, alignment = 'comXYZ', shift_XYZ = None, separate_XYZ = None, merge_box = True, use_box = 'box1')</code>","text":"<p>The method to combine 2 Lammps Frames.</p> <p>Parameters:</p> Name Type Description Default <code>TrajFrame</code> <code>TrajFrame Obj</code> <p>an Object of TrajFrame</p> required <code>merge_type</code> <code>bool</code> <p>merge the same type in 2 TrajFrame. </p> <code>False</code> <code>alignment</code> <code>str</code> <p>choose how to align 2 frame. Defaults to 'comXYZ'. + 'comXYZ': align based on COM + 'minXYZ': align based on left corner + 'maxXYZ': align based on right corner</p> <code>'comXYZ'</code> <code>shift_XYZ</code> <code>list</code> <p>shift a distance from COM aligment. Defaults to [0,0,0].</p> <code>None</code> <code>separate_XYZ</code> <code>list</code> <p>Separate 2 frame with a specific value. Defaults to [0,0,0].</p> <code>None</code> <code>merge_box</code> <code>bool</code> <p>choose to merge box or not. Defaults to True.</p> <code>True</code> <code>use_box</code> <code>str</code> <p>be used as the box size if merge_box=False. Defaults to 'box1'.</p> <code>'box1'</code> <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>Update TrajFrame da1</p> <p>Examples:</p> <pre><code>da1.combine_frame(da2)\n</code></pre> <p>Todo<ul> <li>combine box_angle</li> </ul> </p> Refs: <pre><code>[1]. Deep copy: https://stackoverflow.com/questions/3975376/understanding-dict-copy-shallow-or-deep/3975388#3975388\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.unwrap_coord_DATA","title":"<code>unwrap_coord_DATA(imgFlag = ['x', 'y', 'z'], atom_types = [])</code>","text":"<p>The method to upwrap coords in DATA file.</p> <p>Parameters:</p> Name Type Description Default <code>imgFlag</code> <code>list</code> <p>image Flags in data file. Defaults to ['x','y','z'].</p> <code>['x', 'y', 'z']</code> <code>atom_types</code> <code>list</code> <p>just unwrap some atom-types. Defaults to [], mean unwrap all-types.</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>update FRAME</p> <p>???+ Notes:         cannot unwrap_coord_data if imgFlags are not available.</p>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.flip_coords","title":"<code>flip_coords(dim = [1, 1, 1])</code>","text":"<p>The method to flip coords over the center.</p> <p>Parameters:</p> Name Type Description Default <code>dim</code> <code>list</code> <p>choose the dimenstion to take flip. Defaults to [1,1,1].</p> <code>[1, 1, 1]</code> <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>update FRAME</p> TODOs <p>Remove pandas Warning.</p>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.wrap_coords_DUMP","title":"<code>wrap_coords_DUMP(dim = [1, 1, 1])</code>","text":"<p>The method to flip coords over the center.</p> <p>Parameters:</p> Name Type Description Default <code>dim</code> <code>list</code> <p>choose the dimenstion to take flip. Defaults to [1,1,1].</p> <code>[1, 1, 1]</code> <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>update FRAME</p>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.change_atom_type","title":"<code>change_atom_type(old_type, new_type, save_old_type = True)</code>","text":"<p>The method to change types of atoms in system.</p> <p>Parameters:</p> Name Type Description Default <code>old_type</code> <code>list</code> <p>a list of old-types.</p> required <code>new_type</code> <code>int</code> <p>one new-type.</p> required <code>save_old_type</code> <code>bool</code> <p>to back up old types. Default to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>update FRAME</p> <p>Examples:</p> <pre><code>da.chage_atom_type([1,2,3], 2)\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.merge_atom_type","title":"<code>merge_atom_type(old_type, save_old_type = True)</code>","text":"<p>The method to merge types of atoms in system.</p> <p>Parameters:</p> Name Type Description Default <code>old_type</code> <code>list</code> <p>a list of old-types.</p> required <code>save_old_type</code> <code>bool</code> <p>to back up old types. Default to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>update FRAME</p> <p>Examples:</p> <pre><code>da.chage_atom_type([1,2,3], 2)\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.copy","title":"<code>copy()</code>","text":"<p>The method to make an indepedent copy of TrajFrame Obj. Then, the change values of the fields of the new object, the old object should not be affected by that.</p> <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>new TrajFrame Obj.</p> <p>Examples:</p> <pre><code>da1 = da.copy()\n</code></pre> Refs: <pre><code>[1]. \"shallow copying\" vs \"deep copying\": https://stackoverflow.com/questions/3975376/understanding-dict-copy-shallow-or-deep/3975388#3975388\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.replicate","title":"<code>replicate(dim = [1, 1, 1])</code>","text":"<p>The method to flip coords over the center.</p> <p>Parameters:</p> Name Type Description Default <code>dim</code> <code>list</code> <p>choose the dimenstion to take flip. Defaults to [1,1,1].</p> <code>[1, 1, 1]</code> <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>update FRAME</p>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.scale_box","title":"<code>scale_box(scale = None, final = None, delta = None, remap = True)</code>","text":"<p>The method to change size of simulation box.</p> <p>Parameters:</p> Name Type Description Default <code>scale</code> <code>list</code> <p>to set scale ratio on each dimension of the box. scale = [0.7, 0.7, None] : if one dimension is set \"None\" its length is not changed.</p> <code>None</code> <code>final</code> <code>list</code> <p>to set final length on each dimension of the box.</p> <code>None</code> <code>delta</code> <code>list</code> <p>to set amount of change on each dimension of the box.</p> <code>None</code> <code>remap</code> <code>bool</code> <p>remap atom coordinate. Default to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>update FRAME</p> <p>Examples:</p> <pre><code>da.scale_box(scale=[0.7, 0.7, None])\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.check_exist","title":"<code>check_exist(atom_types = None, mass_types = None)</code>","text":"<p>The method to check whether something is existed in system or not.</p> <p>Parameters:</p> Name Type Description Default <code>atom_types</code> <code>list</code> <p>list-of-int of atom-types. Default to None.</p> <code>None</code> <code>mass_types</code> <code>list</code> <p>list-of-int of atom-types. Default to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>mgs</code> <code>str</code> <p>raise Message if error.</p> <p>Examples:</p> <pre><code>da.isExist(atom_types=[2,3])\n</code></pre> Notes <pre><code>set() also return unique values.\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.compute_mass","title":"<code>compute_mass(atom_types = [])</code>","text":"<p>The method to compute mass of selected atom_types.</p> <p>Parameters:</p> Name Type Description Default <code>atom_types</code> <code>list</code> <p>atom-types to compute masses. Defaults to [], mean all-types.</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>m</code> <code>float</code> <p>total mass of selected atoms.</p> <p>Examples:</p> <pre><code>da.compute_mass(atom_types=[2,3])\n</code></pre>"},{"location":"io/Traj_Frame/#thatool.io.Traj_Frame.TrajFrame.compute_wt_percent","title":"<code>compute_wt_percent(atom_types)</code>","text":"<p>The method to compute weight percentage of some atom_types.</p> <p>Parameters:</p> Name Type Description Default <code>atom_types</code> <code>list</code> <p>atom-types compute percentage of weight.</p> required <p>Returns:</p> Name Type Description <code>wt</code> <code>float</code> <p>weight percentage of chosen atoms.</p> <p>Examples:</p> <pre><code>da.compute_wt_percent(atom_types=[2,3])\n</code></pre>"},{"location":"io/Traj_Multi_Frames/","title":"Trajectories Data","text":""},{"location":"io/Traj_Multi_Frames/#thatool.io.TrajMultiFrames","title":"<code>thatool.io.TrajMultiFrames</code>","text":"<p>Create an Object for a multi-FRAMEs of trajectories from MD simulation.</p> <ul> <li>read frome XYZ file</li> </ul>"},{"location":"io/Traj_Multi_Frames/#thatool.io.Traj_Multi_Frames.TrajMultiFrames.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>initilize the TrajFrame object</p> Note <p>Use mutator, so do not use self.* when define value</p>"},{"location":"io/Traj_Multi_Frames/#thatool.io.Traj_Multi_Frames.TrajMultiFrames.readXYZ","title":"<code>readXYZ(filename)</code>","text":"<p>The method create Multi-FRAME object by reading XYZ file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>name of input file</p> required <p>Returns:</p> Name Type Description <code>Obj</code> <code>TrajFrame</code> <p>update FRAME</p> <p>Examples:</p> <pre><code>da = io.TrajFrame(pdb_file='mydata.pdb')\n</code></pre>"},{"location":"io/define_script/","title":"Define scripts","text":""},{"location":"io/define_script/#thatool.io.define_script","title":"<code>thatool.io.define_script</code>","text":"<p>This module contains functions to define some specific scripts.</p>"},{"location":"io/define_script/#thatool.io.define_script.FCCUBIC_script","title":"<code>FCCUBIC_script(a_fcc, zDirect, label = 'mcv', alpha = 27, partialCompute = False, atoms = '@mdatoms', atomsA = None, atomsB = None, options = '')</code>","text":"<p>PLUMED script to compute FCCUBIC</p> <p>Parameters:</p> Name Type Description Default <code>a_fcc</code> <code>float</code> <p>Lattice constant of FCC crystal</p> required <code>zDirect</code> <code>str</code> <p>specify the z-direction of crystal</p> required <code>label</code> <code>str</code> <p>label of PLUMED command</p> <code>'mcv'</code> <code>alpha</code> <code>int</code> <p>ALPHA parameter to compute FCCUBIC colvar.</p> <code>27</code> <code>atoms</code> <code>str</code> <p>specify atom-ids in computed group.</p> <code>'@mdatoms'</code> <code>partialCompute</code> <code>bool</code> <p>compute for some atoms.</p> <code>False</code> <code>atomsA</code> <code>str</code> <p>specify atom-ids in group A.</p> <code>None</code> <code>atomsB</code> <code>str</code> <p>specify atom-ids in group B.</p> <code>None</code> <code>options</code> <code>str</code> <p>add options.</p> <code>''</code> <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>list of strings.</p>"},{"location":"io/define_script/#thatool.io.define_script.LOCAL_CRYSTALINITY_script","title":"<code>LOCAL_CRYSTALINITY_script(a_fcc, zDirect, label = 'mcv', vectors = [[1, 0, 0], [0, 1, 0], [0, 0, 1]], atoms = '@mdatoms', options = '')</code>","text":"<p>PLUMED script to compute LOCAL_CRYSTALINITY</p> <p>Parameters:</p> Name Type Description Default <code>a_fcc</code> <code>float</code> <p>Lattice constant of FCC crystal</p> required <code>zDirect</code> <code>str</code> <p>specify the z-direction of crystal</p> required <code>label</code> <code>str</code> <p>label of PLUMED command</p> <code>'mcv'</code> <code>vectors</code> <code>list</code> <p>2xN list of lists, to specify directions of reciprocal vectors.</p> <code>[[1, 0, 0], [0, 1, 0], [0, 0, 1]]</code> <code>atoms</code> <code>str</code> <p>specify atom-ids in computed group.</p> <code>'@mdatoms'</code> <code>options</code> <code>str</code> <p>add options.</p> <code>''</code> <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>list of strings.</p>"},{"location":"io/define_script/#thatool.io.define_script.LOGMFD_script","title":"<code>LOGMFD_script(ARG, FICT, FICT_MIN, FICT_MAX, TEMP, DELTA_T, INTERVAL, KAPPA, deltaF, deltaX, kB, label = 'mfd', FLOG = 5000, MFDstat = 'VS')</code>","text":"<p>PLUMED script to compute LOGFMD</p> <p>Parameters:</p> Name Type Description Default <code>ARG</code> <code>str</code> <p>the scalar input for this action</p> required <code>FICT</code> <code>float</code> <p>The initial values of the fictitious dynamical variables</p> required <code>FICT_MIN</code> <code>float</code> <p>Boundaries of CV_space </p> required <code>FICT_MAX</code> <code>float</code> <p>Boundaries of CV_space</p> required <code>TEMP</code> <code>float</code> <p>Temperature of the fictitious dynamical variables</p> required <code>DELTA_T</code> <code>float</code> <p>Time step for the fictitious dynamical variables (MFD step)</p> required <code>INTERVAL</code> <code>int</code> <p>Period of MD steps ( Nm) to update fictitious dynamical variables</p> required <code>KAPPA</code> <code>int</code> <p>Spring constant of the harmonic restraining potential for the fictitious dynamical variables</p> required <code>deltaF</code> <code>float</code> <p>Energy Barrier to estimate ALPHA (Alpha parameter for LogMFD)</p> required <code>deltaX</code> <code>float</code> <p>CV distance at each MFDstep, to estimate MFICT, VFICT (mass &amp; velocity of fictitious dynamical variable)</p> required <code>kB</code> <code>float</code> <p>Boltzmann constant</p> required <pre><code>label (str): label of PLUMED command\nFLOG (float): The initial free energy value in the LogMFD, initial F(X)\nMFDstat (str): Type of thermostat for the fictitious dynamical variables. NVE, NVT, VS are available.\n</code></pre> <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>list of strings.</p>"},{"location":"io/read_data/","title":"Read data","text":""},{"location":"io/read_data/#thatool.io.read_data","title":"<code>thatool.io.read_data</code>","text":"<p>This module contains functions to read numeric data from various formats of TEXT files.</p>"},{"location":"io/read_data/#thatool.io.read_data.matrix_auto","title":"<code>matrix_auto(file_name, column_line = None, set_column_name = None, comment = '#', read_note = False) -&gt; pd.DataFrame</code>","text":"<p>Function to read Data that number of values in each line are not equal, ex: p2p binance (missing values) This cannot be read by Numpy, Pandas,...</p> Notes <p>To return 2 lists from list comprehension, it is better (may faster) running 2 separated list comprehensions. .strip() function remove trailing and leading space in string.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>the text file.</p> required <code>column_line</code> <code>int</code> <p>the line to extract column-names. Defaults to None.</p> <code>None</code> <code>set_column_name</code> <code>list</code> <p>Names of columns to extract. Defaults to None.</p> <code>None</code> <code>comment</code> <code>str</code> <p>comment-line mark. Defaults to \"#\".</p> <code>'#'</code> <p>Returns:</p> Name Type Description <code>df</code> <code>pd.DataFrame</code> <p>pandas DataFrame</p>"},{"location":"io/read_data/#thatool.io.read_data.matrix","title":"<code>matrix(file_name, column_line = None, set_column_name = None, usecols = None)</code>","text":"<p>Function to read Data that is as a regular matrix. The names of columns are exatract based on <code>set_column_name</code> or <code>column_line</code>. If both <code>set_column_name</code> and <code>column_line</code> are not available, the default column's name is: 0 1 2...</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>the text file.</p> required <code>column_line</code> <code>int</code> <p>the line to extract column-names. Defaults to None.</p> <code>None</code> <code>set_column_name</code> <code>list</code> <p>Names of columns to extract. Defaults to None.</p> <code>None</code> <code>usecols</code> <code>tuple</code> <p>only extract some columns. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>df</code> <code>pd.DataFrame</code> <p>pandas DataFrame</p>"},{"location":"io/read_data/#thatool.io.read_data.logMFD","title":"<code>logMFD(file_name, dim = 1) -&gt; pd.DataFrame</code>","text":"<p>Function to read data from LogMFD calculation.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>the logmfd.out file.</p> required <code>dim</code> <code>int</code> <p>dimension of LogMFD calulation. Defaults to 1.</p> <code>1</code> <p>Raises:</p> Type Description <code>Exception</code> <p>description</p> <p>Returns:</p> Name Type Description <code>df</code> <code>pd.DataFrame</code> <p>pandas DataFrame</p>"},{"location":"io/read_data/#thatool.io.read_data.lammps_var","title":"<code>lammps_var(file_name, var_name = None)</code>","text":"<p>Function to extract variable values from LAMMPS input file.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>the text file in LAMMPS input format.</p> required <code>var_name</code> <code>list</code> <p>list of varibalbes to be extracted. Default to None. mean extract all variables.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ds</code> <code>pd.Series</code> <p>pandas Series contains variable in Lammps file</p>"},{"location":"io/read_data/#thatool.io.read_data.plumed_var","title":"<code>plumed_var(file_name, var_name, block_name = None)</code>","text":"<p>Function to extract variable values from PLUMED input file.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>the text file in LAMMPS input format.</p> required <code>var_name</code> <code>str</code> <p>list of keyworks in PLUMED, ex: INTERVAL,...</p> required <code>block_name</code> <code>str</code> <p>block command in Plumed, ex: METAD, LOGMFD. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>value</code> <code>float</code> <p>value of plumed_var.</p> See also <p>Include negative decimal numbers in regular expression</p>"},{"location":"io/read_data/#thatool.io.read_data.list_matrix_in_dir","title":"<code>list_matrix_in_dir(search_key = 'deform_', file_ext = '.txt', read_note = False, recursive = True)</code>","text":"<p>read data from all *.txt files in current and sub-folders.</p> <p>Parameters:</p> Name Type Description Default <code>search_key</code> <code>str</code> <p>a string to search file_name.</p> <code>'deform_'</code> <code>file_ext</code> <code>str</code> <p>file extension. Default to '.txt'</p> <code>'.txt'</code> <p>Returns:</p> Name Type Description <code>ldf</code> <code>list</code> <p>list of DataFrames.</p> <p>labels (list): list of labels         files (list): list of filenames</p>"},{"location":"io/read_script/","title":"Read scripts","text":""},{"location":"io/read_script/#thatool.io.read_script","title":"<code>thatool.io.read_script</code>","text":"<p>This module contains functions to read some specific scripts.</p>"},{"location":"io/read_script/#thatool.io.read_script.lines","title":"<code>lines(file_name, keywords = [])</code>","text":"<p>Function to read lines in a script that match some KEY_WORDs.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>a text file of any format.</p> required <code>keywords</code> <code>list</code> <p>list-of-Keywords to extract a line, ex: METAD, LOGMFD. Default to [], mean read all lines.</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>lines</code> <code>list</code> <p>a list of lines.</p>"},{"location":"io/read_script/#thatool.io.read_script.plumed_block","title":"<code>plumed_block(file_name, block_name = ' ')</code>","text":"<p>Function to read block_command in PLUMED script.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>a text file of PLUMED format.</p> required <code>block_name</code> <code>str</code> <p>block command in PLUMED, ex: METAD, LOGMFD</p> <code>' '</code> <p>Returns:</p> Name Type Description <code>lines</code> <code>list</code> <p>block_of_commandlines</p>"},{"location":"io/write_script/","title":"Write scripts","text":""},{"location":"io/write_script/#thatool.io.write_script","title":"<code>thatool.io.write_script</code>","text":"<p>This module contains functions to write some specific scripts.</p>"},{"location":"io/write_script/#thatool.io.write_script.lines","title":"<code>lines(filename, lines)</code>","text":"<p>Funtion to write a list into text file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>file name.</p> required <code>lines</code> <code>list</code> <p>list of strings.</p> required <p>Returns:</p> Name Type Description <code>file</code> <code>obj</code>"},{"location":"model/D1tube/","title":"1D Tube","text":""},{"location":"model/D1tube/#thatool.model.D1tube","title":"<code>thatool.model.D1tube</code>","text":""},{"location":"model/D1tube/#thatool.model.D1tube.lattice_CNT","title":"<code>lattice_CNT(m, n, bond_CC = 1.421, aspect = 1, basis_atom = 'AB')</code>","text":"<p>Calculates the 3D Cartesian coordinates of atoms of of (n,m) CNT.</p> <p>thangckt, Aug 2022</p> <p>Parameters:</p> Name Type Description Default <code>n,m</code> <code>int</code> <p>Chiral indices n&gt;=m&gt;=0</p> required <code>bond_CC</code> <code>float</code> <p>Length of C-C bonds</p> <code>1.421</code> <code>aspect</code> <code>int</code> <p>The nanotube aspect ratio L/D.</p> <code>1</code> <code>basis_atom</code> <code>str</code> <p>'AB'/'A'/'B': to create semi-Graphene lattice for adoptting Hydrogen atoms  - 'AB': full Garaphene-like crystal  - 'A': semi Graphene-like with atom at A-position  - 'B': semi Graphene-like with atom at B-position</p> <code>'AB'</code> <p>Returns:</p> Name Type Description <code>df</code> <code>DataFrame</code> <p>Nx3 array, contain positions of atoms of 1 units cell of (n,m)graphene sheet.</p> <code>box</code> <code>array</code> <p>Simulation box</p> <code>param</code> <code>dict</code> <p>dict contains characteristic parameters of graphene lattice. 'Chiral_len' (float): length of Translational unit vector, corresponding to length on Y direction 'Translate_len' (float): length of Chiral vector, corresponding to length on X direction 'Chiral_ang' (float): Chiral angle of Graphene sheet in Degree. 'Chiral_vector' (array): Chiral vector 'Translate_vector' (array): translations vector</p> <p>Notes         <pre><code>n=1, m=0 : is the unit cell for Zigzag\nn=1, m=1 : is the unit cell for Armchair\nn&gt;m      : unit cell is automatically computed\n</code></pre></p>"},{"location":"model/D2haxagonal/","title":"2D Haxagonal","text":""},{"location":"model/D2haxagonal/#thatool.model.D2haxagonal","title":"<code>thatool.model.D2haxagonal</code>","text":""},{"location":"model/D2haxagonal/#thatool.model.D2haxagonal.lattice_Graphene","title":"<code>lattice_Graphene(m, n, bond_CC = 1.421, sheet_size = [1, 1], sheet_number = 1, layer_bond = 3.35, basis_atom = 'AB')</code>","text":"<p>Calculates the 3D Cartesian coordinates of atoms of (n,m)graphene sheet/ Graphite</p> <p>thangckt, Nov 2019 (update 2022)</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Chiral indices n&gt;=m&gt;=0</p> required <code>m</code> <code>int</code> <p>Chiral indices n&gt;=m&gt;=0</p> required <code>bond_CC</code> <code>float</code> <p>Length of C-C bonds</p> <code>1.421</code> <code>sheet_size</code> <code>list</code> <p>[Xsize, Ysize], size of graphene sheet</p> <code>[1, 1]</code> <code>sheet_number</code> <code>int</code> <p>number of sheets</p> <code>1</code> <code>layer_bond</code> <code>float</code> <p>Length of plane-plane bonds</p> <code>3.35</code> <code>basis_atom</code> <code>str</code> <p>'AB'/'A'/'B': to create semi-Graphene lattice for adoptting Hydrogen atoms - 'AB': full Garaphene-like crystal - 'A': semi Graphene-like with atom at A-position - 'B': semi Graphene-like with atom at B-position</p> <code>'AB'</code> <p>Returns:</p> Name Type Description <code>df</code> <code>DataFrame</code> <p>Nx3 array, contain positions of atoms of 1 units cell of (n,m)graphene sheet.</p> <code>box</code> <code>array</code> <p>Simulation box</p> <code>param</code> <code>dict</code> <p>dict contains characteristic parameters of graphene lattice. 'Chiral_len' (float): length of Translational unit vector, corresponding to length on Y direction 'Translate_len' (float): length of Chiral vector, corresponding to length on X direction 'Chiral_ang' (float): Chiral angle of Graphene sheet in Degree. 'Chiral_vector' (array): Chiral vector 'Translate_vector' (array): translations vector</p> <p>Notes         <pre><code>n=1, m=0 : is the unit cell for Zigzag\nn=1, m=1 : is the unit cell for Armchair\nn&gt;m      : unit cell is automatically computed\n</code></pre></p>"},{"location":"model/D3crystal/","title":"3D Crystalline","text":""},{"location":"model/D3crystal/#thatool.model.D3crystal","title":"<code>thatool.model.D3crystal</code>","text":""},{"location":"model/D3crystal/#thatool.model.D3crystal.lattice_orthoRHOMBIC","title":"<code>lattice_orthoRHOMBIC(crystal_type, lattice_constant, orient = [[1, 0, 0], [0, 1, 0], [0, 0, 1]], size = [1, 1, 1], bound_cond = [1, 1, 1], tol_on_bound = 0.1)</code>","text":"<p>Function to create atomic coordinates for crystal model</p> <p>Parameters:</p> Name Type Description Default <code>crystal_type</code> <code>str</code> <p>'V2O5', 'FCC', 'BCC'</p> required <code>lattice_constant</code> <code>list</code> <p>lattice constant [a,b,c] corresponding to [x,y,z]</p> required <code>orient</code> <code>list</code> <p>3x3 array, contain direction vectors define crystal orientation, ex: ([[1,0,0], [0,1,0], [0,0,1]])</p> <code>[[1, 0, 0], [0, 1, 0], [0, 0, 1]]</code> <code>size</code> <code>list</code> <p>[Nx Ny Nz] 1x3 array, size of model, Nx is X-size in lattice constant unit</p> <code>[1, 1, 1]</code> <code>bound_cond</code> <code>list</code> <p>1x3 array contain convention for boundary conditions: 1 is peridic; 0 is not</p> <code>[1, 1, 1]</code> <p>Returns:</p> Name Type Description <code>points</code> <code>np.array</code> <p>Nx3 array contain positions of atoms.</p> <code>box</code> <code>np.array</code> <p>3x2 array contain size of box contain lattice ([[xlo, xhi], [ylo, yhi], [zlo, zhi]])</p> <code>unit_box</code> <code>np.array</code> <p>3x2 array contain size of unit cell</p>"},{"location":"model/D3crystal/#thatool.model.D3crystal.lattice_CUBIC","title":"<code>lattice_CUBIC(crystal_type, lattice_constant, orient = [[1, 0, 0], [0, 1, 0], [0, 0, 1]], size = [1, 1, 1], bound_cond = [1, 1, 1], tol_on_bound = 0.1)</code>","text":"<p>Shortcut to create CUBIC crystal, as subclass of ortthoRHOMBIC</p> <p>Parameters:</p> Name Type Description Default <code>crystal_type</code> <code>str</code> <p>'FCC', 'BCC'</p> required <code>lattice_constant</code> <code>float</code> <p>lattice constant a</p> required <code>orient</code> <code>list</code> <p>3x3 array, contain direction vectors define crystal orientation, ex: ([[1,0,0], [0,1,0], [0,0,1]])</p> <code>[[1, 0, 0], [0, 1, 0], [0, 0, 1]]</code> <code>size</code> <code>list</code> <p>[Nx Ny Nz] 1x3 array, size of model, Nx is X-size in lattice constant unit</p> <code>[1, 1, 1]</code> <code>bound_cond</code> <code>list</code> <p>1x3 array contain convention for boundary conditions: 1 is peridic; 0 is not</p> <code>[1, 1, 1]</code> <p>Returns:</p> Name Type Description <code>points</code> <code>np.array</code> <p>Nx3 array contain positions of atoms.</p> <code>box</code> <code>np.array</code> <p>3x2 array contain size of box contain lattice ([[xlo, xhi], [ylo, yhi], [zlo, zhi]])</p> <code>unit_box</code> <code>np.array</code> <p>3x2 array contain size of unit cell</p>"},{"location":"model/coordinate_tranform/","title":"coordinate_tranform","text":""},{"location":"model/coordinate_tranform/#thatool.model.box_orientation","title":"<code>thatool.model.box_orientation(box_size = [1, 1, 1], zDirect = '001', xDirect = None)</code>","text":"<p>covert Orirentation and length of simulation box.</p> <p>Parameters:</p> Name Type Description Default <code>box_size</code> <code>list</code> <p>dimension of box on each side as in [100] direction</p> <code>[1, 1, 1]</code> <code>zDirect</code> <code>str</code> <p>specify the direction of z-side. Defaults to '001', mean nothing is happen.</p> <code>'001'</code> <code>xDirect</code> <code>str</code> <p>specify the direction of z-side.  Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>newOrient</code> <code>list</code> <p>list-of-vectors of 3 directional vectors.</p> <code>box_size</code> <code>tuple</code> <p>dimension of box on each side.</p> <p>Examples:</p>"},{"location":"model/coordinate_tranform/#thatool.model.CoordTransform","title":"<code>thatool.model.CoordTransform</code>","text":"<p>We can express a rotation using direction-cosines-matrix (DCM) or Euler-angles (phi,theta,psi) REFs:          1. Bower, Allan F. Applied Mechanics of Solids. CRC Press, 2009. page 711         2. https://link.aps.org/doi/10.1103/PhysRevB.92.180102         3. https://en.wikipedia.org/wiki/Euler_angles</p>"},{"location":"model/coordinate_tranform/#thatool.model.coord_rotation.CoordTransform.__init__","title":"<code>__init__(old_orient = [[1, 0, 0], [0, 1, 0], [0, 0, 1]], new_orient = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])</code>","text":"<ul> <li>Optional Inputs:         old_orient: 3x3 array/list, contains 3 mutully orthotropic unit vectors of the OLD basis          new_orient: 3x3 array/list, contains 3 mutully orthotropic unit vectors of the NEW basis                 (all input vector will be normalized to unit vectors)</li> </ul> oldAxis = array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) <p>newAxis = array([[1, -1, 0], [1, 1, -2], [1, 1, 1]])</p> <pre><code>            BT = thaTool.CoordTransform(old_orient=oldAxis, new_orient=newAxis)\n</code></pre>"},{"location":"model/coordinate_tranform/#thatool.model.coord_rotation.CoordTransform.direction_cosine_matrix","title":"<code>direction_cosine_matrix()</code>","text":"<p>Calculate direction-cosines-matrix (DCM) between 2 coordinates systems  * Input:  * Output:         Q: 3x3 array, the rotation matrix or matrix of direction cosines Example:          BT = thaTool.CoordTransform(old_orient=oldAxis, new_orient=newAxis)          Q = BT.direction_cosine_matrix() By Cao Thang, Apr 2019,  Update: May2020</p>"},{"location":"model/coordinate_tranform/#thatool.model.coord_rotation.CoordTransform.rotation_matrix","title":"<code>rotation_matrix()</code>","text":"<p>Calculate Rotation-matrix (R) as transpose of DCM By Cao Thang, Apr 2019,  Update: May2020</p>"},{"location":"model/coordinate_tranform/#thatool.model.coord_rotation.CoordTransform.EA2ROT","title":"<code>EA2ROT(euler_angle, unit = 'rad')</code>","text":"<p>Calculate Rotation_Matrix Euler Angles (EA) between 2 coordinates systems (ZXZ proper Euler angles) This is just for testing, since we dont know whether input angles yield orthogonal axis or not * Input Compulsory:          - EulerAngle: 1x3 array/list (phi,theta,psi) in Rad or Deg * Input (Optional):          - unit='rad': 'rad' or 'deg'      (default is rad) * Output:         Q: 3x3 array, the rotation matrix or matrix of direction cosines Example:          BT = thaTool.CoordTransform()          DCM = BT.EulerAngle(euler_angle=[90,], unit='deg') NOTEs: don't use arctan2() By Cao Thang, May2020</p>"},{"location":"model/coordinate_tranform/#thatool.model.coord_rotation.CoordTransform.euler_angle","title":"<code>euler_angle(unit = 'rad')</code>","text":"<p>Calculate Euler Angles (EA) between 2 coordinates systems (intrinsic ZXZ proper Euler angles) https://en.wikipedia.org/wiki/Euler_angles#Definition_by_intrinsic_rotations https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.transform.Rotation.as_euler.html#r72d546869407-1 * Input (Optional):          - unit='rad': 'rad' or 'deg'      (default is rad) * Output:         - Angle: 1x3 array (phi,theta,psi) in Rad  (apply intrinsic ZXZ proper Euler) Example:          BT = thaTool.CoordTransform(old_orient=oldAxis, new_orient=newAxis)          phi,theta,psi = BT.EulerAngle(unit='deg') NOTEs:          - don't use arctan2()         - Rotation Matrix is as to tranpose of DCM, use Rotation Matrix to compute EA By Cao Thang, May2020</p>"},{"location":"model/coordinate_tranform/#thatool.model.coord_rotation.CoordTransform.euler_angle_PSpincal","title":"<code>euler_angle_PSpincal(EulerOrder = 'zxz', unit = 'rad', tol = 1e-07)</code>","text":"<p>Calculate Euler Angles (EA) between 2 coordinates systems (proper Eulerian angles) [1] navpy not use 'ZXZ': https://navpy.readthedocs.io/en/latest/code_docs/coordinate_transformations.html [2] use this https://pypi.org/project/PSpincalc/ https://github.com/tuxcell/PSpincalc/blob/master/PSpincalc/PSpincalc.py                          Ex: https://github.com/tuxcell/PSpincalc/blob/master/examples/examplesPSpincalc.ipynb * Input (Optional):          unit: 'rad', 'deg'      (default is rad)         EulerOrder='zxz': rotation order, lowercase [\"zyx\",\"zxy\",\"yxz\",\"xzy\",\"xyz\",\"yzx\",\"zyz\",\"zxz\",\"yxy\",\"yzy\",\"xyx\",\"xzx\"] * Output:         Angle: 1x3 array (phi,theta,psi) in Rad  (apply extrinsic ZXZ proper Euler) NOTEs:          - this module may define psi as phi, and vice versa. So becareful         - should not use PSpincalc, since it produce unknown value? By Cao Thang, May2020</p>"},{"location":"model/coordinate_tranform/#thatool.model.coord_rotation.CoordTransform.rotate_3d","title":"<code>rotate_3d(points)</code>","text":"<p>Rotate a set of points (or set of vectors) from a OLD-coords to NEW-coords * Input:         - points: Nx3 array, contain coords in OLD coordinates systems * Output:         - points: Nx3 array, contain coords in NEW coordinates systems Example:          BT = thaTool.CoordTransform(old_orient=oldAxis, new_orient=newAxis)          newP = BT.rotate_3d(P)</p>"},{"location":"model/coordinate_tranform/#thatool.model.rot1axis","title":"<code>thatool.model.rot1axis(P, theta, axis = 'X')</code>","text":"<p>Rotate array of points about 1 axis * Input:    P      : Nx3 array, contain input poits                         theta  : the rotation angle in Degree                         axis   : Rotation axis * Output:   outP   : Nx3 array, contain points after rotation</p>"},{"location":"model/coordinate_tranform/#thatool.model.check_right_hand","title":"<code>thatool.model.check_right_hand(list_3vec = [[1, 0, 0], [0, 1, 0], [0, 0, 1]])</code>","text":"<p>check right_hand_rule orthogonal of 3 vectors</p>"},{"location":"model/coordinate_tranform/#thatool.model.guess_right_hand","title":"<code>thatool.model.guess_right_hand(list_2vec = [[1, 0, 0], [0, 1, 0]])</code>","text":"<p>give 2 vectors, then guess the third vector that satisfy right_hand_rule</p>"},{"location":"model/forcefield_info/","title":"forcefield_info","text":""},{"location":"model/forcefield_info/#thatool.model.forcefield_info","title":"<code>thatool.model.forcefield_info</code>","text":"<p>This module contains some data for various ForceField. Data obtained from simulation</p>"},{"location":"model/forcefield_info/#thatool.model.forcefield_info.EAM","title":"<code>EAM</code>","text":"<p>Create an Object (class) of Potential, contain some pre-setup information * Attributes:         atom_symbol         :         cutoff          : force cutoff of potential         force_field         * thermal_coeff    : return values thermal expansion coefficients of input Structure         * Energy barrier Coeff: an estimation of per-atom energy barrier for melting,                                 for a system of N atoms  \ud835\udc39=\ud835\udc53\u2217\ud835\udc41^(\u2154) , then perAtom barrier  \ud835\udc53=\ud835\udc39/\ud835\udc41^(\u2154)                                 This method return f(T)</p> <ul> <li>Methods:         lattice_constant      : compute lattice constant at a specific temperature</li> </ul>"},{"location":"model/forcefield_info/#thatool.model.forcefield_info.EAM.__init__","title":"<code>__init__(atom_symbol, force_field, model_type = 'BULK', zDirect = '001', thickness = 20)</code>","text":"<p>atom_symbol         : 'Al', 'Cu',... force_field  :          'Cu' : 'Mishin-2001'; 'Foiles-1986';...         'Al' : 'Mishin-1999'; 'Sheng-2011';... model_type       : 'BULK' or 'PLATE' zDirect         : '001' or '110' or '111' or  thickness       : thickness of plate</p>"},{"location":"model/forcefield_info/#thatool.model.forcefield_info.EAM.melt_barrier","title":"<code>melt_barrier(Temp)</code>","text":"<p>for a system of N atoms  \ud835\udc39=\ud835\udc53\u2217\ud835\udc41^(\u2154) , then perAtom barrier  \ud835\udc53=\ud835\udc39/\ud835\udc41^(\u2154). This method return f(T)</p>"},{"location":"model/forcefield_info/#thatool.model.forcefield_info.ReaxFF","title":"<code>ReaxFF</code>","text":"<p>Create an Object (class) of Potential, contain some pre-setup information * Attributes:         atom_symbol         :         force_field         * thermal_coeff    : return values thermal expansion coefficients of input Structure         * Energy barrier Coeff: an estimation of per-atom energy barrier for melting,                                 for a system of N atoms  \ud835\udc39=\ud835\udc53\u2217\ud835\udc41^(\u2154) , then perAtom barrier  \ud835\udc53=\ud835\udc39/\ud835\udc41^(\u2154)                                 This method return f(T)</p> <ul> <li>Methods:         lattice_constant      : compute lattice constant at a specific temperature</li> </ul>"},{"location":"model/forcefield_info/#thatool.model.forcefield_info.ReaxFF.__init__","title":"<code>__init__(atom_symbol, force_field, model_type = 'BULK', zDirect = '001')</code>","text":"<p>atom_symbol         : 'V2O5',... force_field  :          'V2O5' : 'Chenoweth2008';... model_type       : 'BULK' or 'PLATE' zDirect         : '001'</p>"},{"location":"model/pair_LJ/","title":"pair_LJ","text":""},{"location":"model/pair_LJ/#thatool.model.pair_LJ","title":"<code>thatool.model.pair_LJ(dict_group1, dict_group2, unit_style, combining_rule = 'geometric', pair_style = 'lj/cut')</code>","text":"<p>compute parameters (epsilon &amp; sigma) of LJ potential at interface Note that in LAMMPS: 'Lorentz_Berthelot'='arithmetic'   https://tinyurl.com/yzpwg2hs * Input:         - dict_group1, dict_group2: Dicts contain sig &amp; eps of each element of 2 surfaces.                  Must contain keys: 'atom_name', 'type', 'sigma', 'epsilon'         - unit_style:   'real' or 'metal' - combining_rule='arithmetic' (also 'Lorentz_Berthelot')                 + 'arithmetic'/'Lorentz_Berthelot'                 + 'geometric'                 + 'sixthpower'         - pair_style='lj/cut': pair_style of Lammps  lj/cut/coul/long         - external_interaction: require * Return:          - list-of-string: contain pair_coeffs for LAMMPS * NOTEs:          - energy unit is kcal/mol, but in OPLSaa of Foyer is kJ/mol.         - types in 2 dict must either completely different or indentical</p> <p>Ex:     PMMA/h_BN interface dict_group1 = {'element':['CT','CT','CT','CT','HC','HC','C_2','O_2','OS','CT','HC'],          'atom_name':['opls_135','opls_136','opls_137','opls_139','opls_140','opls_282','opls_465','opls_466','opls_467','opls_468','opls_469'],         'type':[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],          'sigma': [3.5, 3.5, 3.5, 3.5, 2.5, 2.42, 3.75, 2.96, 3.0, 3.5, 2.42],          'epsilon':[0.066, 0.066, 0.066, 0.066, 0.03, 0.015, 0.105, 0.21, 0.17, 0.066, 0.015]} dict_group2 = {'element':['B','N'],                  'atom_name':['B','N'],                 'type':[12,13],                  'sigma': [3.453, 3.365],                  'epsilon':[0.094988, 0.1448671]} combining_LJ(dict_group1, dict_group2, combining_rule='Lorentz_Berthelot', pair_style='lj/cut/coul/long')</p>"},{"location":"model/periodic_boundary/","title":"periodic_boundary","text":""},{"location":"model/periodic_boundary/#thatool.model.add_periodic_image","title":"<code>thatool.model.add_periodic_image(points, box, bound_cond = [1, 1, 1], cutoff = 6.5)</code>","text":"<p>Function to add \"Periodic Images\" of atoms at Periodic Boundaries (with a specific cutoff distance) By Thang, June 2019 (update 2022)</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>2d-list np.array pd.DataFrame</code> <p>Mx3 Matrix contain positions of atoms before Wrapping</p> required <code>box</code> <code>3d-list array</code> <p>3x2 Matrix contain simulation box bounds</p> required <code>bound_cond</code> <code>list</code> <p>1x3 list contains convention of Peridic bounds(ex: bound_cond = [1 1 1])</p> <code>[1, 1, 1]</code> <code>cutoff</code> <code>float</code> <p>Cutoff distance</p> <code>6.5</code> <p>Returns:</p> Name Type Description <code>df</code> <code>pd.DataFrame</code> <p>contains original atoms and image atoms with remark colum df['image'].</p> <p>Examples:</p> <p>```py</p> <pre><code>df = add_periodic_image(P, box, bound_cond=[1 1 0], cutoff=5)\n    ```\n</code></pre>"},{"location":"model/periodic_boundary/#thatool.model.wrap_coord_PBC","title":"<code>thatool.model.wrap_coord_PBC(points, box, bound_cond = [1, 1, 1])</code>","text":"<p>Function to wrap atom positions at Periodic Boundaries By Thang, June 2019 (update 2022)</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>2d-list np.array pd.DataFrame</code> <p>Mx3 Matrix contain positions of atoms before Wrapping</p> required <code>box</code> <code>3d-list array</code> <p>3x2 Matrix contain simulation box bounds</p> required <code>bound_cond</code> <code>list</code> <p>1x3 list contains convention of Peridic bounds(ex: bound_cond = [1 1 1])</p> <code>[1, 1, 1]</code> <p>Returns:</p> Name Type Description <code>df</code> <code>pd.DataFrame</code> <p>contains atom positions.</p> <p>Examples:</p> <p>```py</p> <pre><code>df = wrap_coord_PBC(P, box, bound_cond=[1 1 0], cutoff=5)\n    ```\n</code></pre>"},{"location":"model/polymer_mbuild/","title":"polymer_mbuild","text":""},{"location":"model/polymer_mbuild/#thatool.model.polymer_mbuild","title":"<code>thatool.model.polymer_mbuild</code>","text":"<p>This module contains classes and functions to build models of atomic polymers See this Python package: [1] mBuild: https://mbuild.mosdef.org/en/stable/</p> <p>See the files: D:\\code\\code_simulate\\polymer_c21_pickup_hBN_PMMA ef_using_mBuild_foyer.ipynb</p> NOTEs <ol> <li>Due to mbuild cannot be installed with python 3.10, so import this package in functions to avoid checking in thatool</li> </ol>"},{"location":"model/polymer_mbuild/#thatool.model.polymer_mbuild.PMMA_chain","title":"<code>PMMA_chain(chain_len)</code>","text":"<p>build polyPMMA from monomers </p> <p>Parameters:</p> Name Type Description Default <code>chain_len</code> <code>int</code> <p>number of monomers in each polymer = degree of polymerization</p> required <p>Returns:</p> Name Type Description <code>chain</code> <code>mb.compound</code> <p>polymer chain</p>"},{"location":"model/polymer_mbuild/#thatool.model.polymer_mbuild.packing_lammps","title":"<code>packing_lammps(chain, chain_num, density = None, box_size = None, forcefield_name = None, forcefield_files = None, atom_style = 'full', unit_style = 'metal', combining_rule = 'geometric', file_name = 'polymer.dat')</code>","text":"<p>Packing polymer chains into box, and write LAMMPS file Packing based on either density or box_size.</p> <p>Parameters:</p> Name Type Description Default <code>chain</code> <code>mb.compound</code> <p>polymer chain</p> required <code>chain_num</code> <code>int</code> <p>number of chains to be packed.</p> required <code>density</code> <code>float</code> <p>density, unit in kg/m3 (= 1e-3 g/cm3)</p> <code>None</code> <code>box_size</code> <code>list</code> <p>box_size = [3,3,3]</p> <code>None</code> <code>forcefield_name</code> <code>str</code> <p>should be 'oplsaa'.</p> <code>None</code> <code>forcefield_files</code> <code>str</code> <p>path to the *.xml file.</p> <code>None</code> <code>atom_style</code> <code>str</code> <p>atom_style of LAMMPS.</p> <code>'full'</code> <code>unit_style</code> <code>str</code> <p>can be 'metal'/'real'/'lj'</p> <code>'metal'</code>"},{"location":"model/polymer_pysimm/","title":"polymer_pysimm","text":""},{"location":"model/polymer_pysimm/#thatool.model.polymer_pysimm","title":"<code>thatool.model.polymer_pysimm</code>","text":"<p>This module contains classes to build models of atomic polymers See this Python package: [1] pysimm: A python package for simulation of molecular systems, 10.1016/j.softx.2016.12.002 source code: https://github.com/polysimtools/pysimm</p>"},{"location":"model/shells_fcc/","title":"shells_fcc","text":""},{"location":"model/shells_fcc/#thatool.model.shells_fcc","title":"<code>thatool.model.shells_fcc(a)</code>","text":"<p>Compute nearest-neighbor shells for FCC crystal</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>lattice constant</p> required <p>Returns:</p> Name Type Description <code>shell</code> <code>list</code> <p>5 nearest-neighbor shells</p>"},{"location":"utils/compute_angle/","title":"compute_angle","text":""},{"location":"utils/compute_angle/#thatool.utils.angle_vector2vectors","title":"<code>thatool.utils.angle_vector2vectors(fixVector, arrayVectors, unit = 'rad')</code>","text":"<p>copmute angles between a vector with set of vectors</p>"},{"location":"utils/compute_distance/","title":"compute_distance","text":""},{"location":"utils/compute_distance/#thatool.utils.dist2_point2points","title":"<code>thatool.utils.dist2_point2points(point, points)</code>","text":"<p>Compute bond_len and postion_vetors from 1 point to a list of points</p> <p>Parameters:</p> Name Type Description Default <code>point</code> <code>list array</code> <p>coordinate of 1 point.</p> required <code>points</code> <code>list array</code> <p>2d-list of coordinates of points/point.</p> required <p>Returns:</p> Name Type Description <code>df</code> <code>pd.DataFrame</code> <p>pd.DataFrame constains distance and component of connecting vectors.</p>"},{"location":"utils/compute_distance/#thatool.utils.dist2_points2line","title":"<code>thatool.utils.dist2_points2line(points, line = [(0, 0, 0), (0, 0, 0)])</code>","text":"<p>Compute bond_len and postion_vetors from 1 point to a list of points Ref: https://stackoverflow.com/questions/39840030/distance-between-point-and-a-line-from-two-points</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list array DataFrame</code> <p>list of coordinates of points/point.</p> required <code>line</code> <code>list array</code> <p>2d-array contains coordinates to define a line.</p> <code>[(0, 0, 0), (0, 0, 0)]</code> <p>Returns:</p> Name Type Description <code>d</code> <code>float list</code> <p>distances between points and a line.</p>"},{"location":"utils/compute_distance/#thatool.utils.closest_points2line","title":"<code>thatool.utils.closest_points2line(points, line = [(0, 0, 0), (0, 0, 0)], distance = 0, Xbound = None, Ybound = None, Zbound = None)</code>","text":"<p>Find all points locate inside a checkin-distance \"dist\" from a line.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list array</code> <p>list of coordinates of points/point.</p> required <code>line</code> <code>list array</code> <p>[[x1,y1,z1], [x1,y2,z2]]: 2d-list contains coordinates to define a line.</p> <code>[(0, 0, 0), (0, 0, 0)]</code> <code>distance</code> <code>float</code> <p>the checkin-distance.</p> <code>0</code> <code>Xbound</code> <code>tuple</code> <p>define the boundaries for checking. Xbound='line': use the lengths of lines as bounds. Xbound=None: extend to INF. Xbound = (xlo, xhi)</p> <code>None</code> <code>Ybound</code> <code>tuple</code> <p>define the boundaries for checking.</p> <code>None</code> <code>Zbound</code> <code>tuple</code> <p>define the boundaries for checking.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ds_idx</code> <code>Series</code> <p>Series of indices of points within the checkin-distance</p>"},{"location":"utils/compute_distance/#thatool.utils.closest_points2multilines","title":"<code>thatool.utils.closest_points2multilines(points, multilines = [], distance = 0, Xbound = None, Ybound = None, Zbound = None)</code>","text":"<p>Find all points locate inside a checkin-distance \"dist\" from multilines. The Bound is set as the line-lengths.</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>list array</code> <p>list of coordinates of points/point.</p> required <code>multilines</code> <code>list</code> <p>list of pair-points, each pair-point contains coordinates of 2 points to define a line used in 'closest_points2line'.</p> <code>[]</code> <code>distance</code> <code>float</code> <p>the checkin-distance.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>ds_idx</code> <code>Series</code> <p>Series of indices of points within the checkin-distance</p>"},{"location":"utils/compute_tensor/","title":"compute_tensor","text":""},{"location":"utils/compute_tensor/#thatool.utils.stress_tensor","title":"<code>thatool.utils.stress_tensor(per_atom_stress_tensor, atomic_volume, unitFac = 1)</code>","text":"<p>Compute local pressure/stress Args:          per_atom_stress_tensor : Nx6 array of the per-atom stress tensor         atomVol    : Nx1 vector of atomVol         inUNIT=['bar','angstrom'], outUNIT=['bar'] \u2192 unitFac=1e-4 for ['GPa']  Returns:          pressure scalar         Stress tensor</p>"},{"location":"utils/compute_tensor/#thatool.utils.ke_tensor","title":"<code>thatool.utils.ke_tensor(vel, mass, kb)</code>","text":"<p>Compute Kinetic Energy tensors, and Temp</p> <p>Parameters:</p> Name Type Description Default <code>vel</code> <code>array</code> <p>Nx3 array of per-atom velocity</p> required <code>mass</code> <code>array</code> <p>Nx3 array of atomic mass</p> required <code>inUNIT</code> <code>str</code> <p>['angstrom','ps','amu','eV'], outUNIT=['eV','K']</p> required <p>Returns:          Kinetic energy tensor, Kinetic scalar, Temperature scalar</p>"},{"location":"utils/detect_sign_change/","title":"detect_sign_change","text":""},{"location":"utils/detect_sign_change/#thatool.utils.detect_sign_change","title":"<code>thatool.utils.detect_sign_change</code>","text":""},{"location":"utils/detect_sign_change/#thatool.utils.detect_sign_change.detect_sign_change","title":"<code>detect_sign_change(y, x = [])</code>","text":"<p>determine points where line y=y(x) change its sign * Compulsory inputs:          y: Nx1 arrays, contains dependent variable y         x: (Optinal) Nx1 arrays, contains independent variable x of line y(x) * Output:         idx: 1d array of indices where sign changes</p>"},{"location":"utils/find_slope/","title":"find_slope","text":""},{"location":"utils/find_slope/#thatool.utils.find_slope","title":"<code>thatool.utils.find_slope(points)</code>","text":"<p>Compute slope of a linear relation</p> <p>Parameters:</p> Name Type Description Default <code>points</code> <code>array DataFram list</code> <p>2d array, contains XY data.</p> required Return <p>slope (float): the slope to linear relation model_fit (Obj): An object of lmfit, the fitted of linear model.</p>"},{"location":"utils/intersect_point/","title":"intersect_point","text":""},{"location":"utils/intersect_point/#thatool.utils.intersect_point","title":"<code>thatool.utils.intersect_point</code>","text":""},{"location":"utils/intersect_point/#thatool.utils.intersect_point.intersect_point","title":"<code>intersect_point(Points1, Points2)</code>","text":"<p>determine the intersectoint points between 2 lines * Compulsory inputs:          dataPoints1, dataPoints2: Nx2 arrays, contains data points of lines</p>"},{"location":"utils/unit/","title":"unit","text":""},{"location":"utils/unit/#thatool.utils.unit","title":"<code>thatool.utils.unit</code>","text":"<p>This module to convert unit of some physical properties pressure</p> <p>Consider to use this module: https://unyt.readthedocs.io/en/stable/usage.html</p>"},{"location":"utils/unit/#thatool.utils.unit.pressure","title":"<code>pressure(key_word = 'all_key')</code>","text":"<p>convert unit of pressure Pa: Pascal atm: standard atmosphere at: technical atmosphere</p> <p>kgf/cm2 = kg/cm2 1 Pa = 1 N/m^2 1 kgf/cm2 = 1</p> <p>Parameters:</p> Name Type Description Default <code>key_word</code> <code>str</code> <p>a string to specify units to be converted.</p> <code>'all_key'</code> <p>Returns:</p> Name Type Description <code>factor</code> <code>float</code> <p>multiply factor of conversion </p> <p>Examples:</p> <pre><code>key_word='Pa_atm': convert from Pa (Pascal) to atm (Standard atmosphere)\n</code></pre>"},{"location":"utils/unit/#thatool.utils.unit.force","title":"<code>force(key_word = 'all_key')</code>","text":"<p>convert unit of force N: Newton kgf = m.g: kilogram-force (weight: one kilogram of mass in a 9.80665 m/s2 gravitational field) lbf: pound-force p: pond</p> <p>1 N = 1 J/m    (Work = Force.distance) 1 kcal = 4184 J = 4184 N.m = 4184.10^10 N.Angstrom 69.4786 pN = 1 kcal/mol Angstrom.     https://tinyurl.com/yb2gnlhc</p> <p>Parameters:</p> Name Type Description Default <code>key_word</code> <code>str</code> <p>a string to specify units to be converted.</p> <code>'all_key'</code> <p>Returns:</p> Name Type Description <code>factor</code> <code>float</code> <p>multiply factor of conversion</p>"},{"location":"utils/unit/#thatool.utils.unit.energy","title":"<code>energy(key_word = 'all_key')</code>","text":"<p>convert unit of energy J: Joule W.h: watt-hour cal: calorie (th) hp.h: horsepower hour eV: electron-volt</p> <p>1 J = 1 N.m    (Work = Force.distance) 1J = 1 W.s</p> <p>Parameters:</p> Name Type Description Default <code>key_word</code> <code>str</code> <p>a string to specify units to be converted.</p> <code>'all_key'</code> <p>Returns:</p> Name Type Description <code>factor</code> <code>float</code> <p>multiply factor of conversion </p> <p>Notes         <pre><code>## convert eV to kcal/mol\neV2J = 1/unit_convert.energy('J_eV')\nJ2Jmol = unit_convert.constant('1/mol')\nkj2kcal = 1/unit_convert.energy('kcal/mol_kJ/mol')\neV2kcalmol = eV2J * J2Jmol * 1e-3 *kj2kcal\n</code></pre></p>"},{"location":"utils/unit/#thatool.utils.unit.constant","title":"<code>constant(key_word = 'all_key')</code>","text":"<p>list of constants Na = 6.02214076e23  (=1/mol): Avogadro number</p> <ul> <li>Input:         - key_word='all_key'         Ex: key_word='Pa_atm': convert from Pa (Pascal) to atm (Standard atmosphere)</li> <li>Output:         factor: float, multiply factor of conversion</li> </ul>"},{"location":"vis/matplot_param/","title":"matplot_param","text":""},{"location":"vis/matplot_param/#thatool.vis.matplot_param","title":"<code>thatool.vis.matplot_param</code>","text":"<p>This part contains some Global parameters to set for Matplotlib based on the way called \"Setting rcParams at runtime\". All rc settings are stored in a dictionary-like variable called <code>matplotlib.rcParams</code>, to see all valid Params:         <pre><code>        import matplotlib as mpl\nmpl.rcParams.keys()\n</code></pre></p> <p>Examples:</p> <pre><code>        from thatool.visualize import matplot_param\nimport matplotlib.pyplot as plt\nplt.rcParams.update(matplot_param.myPARAM)\n</code></pre> Refs <p>[1]. Customizing Matplotlib with style sheets and rcParams</p> <p>fontsize for legend, stick,...not for text: fontsize : int or float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large', 'larger', 'smaller'} 'smaller'= 83%% of the current font size.</p>"},{"location":"vis/matplot_param/#thatool.vis.matplot_param--use-latex-httpsmatplotliborgstabletutorialstextusetexhtml","title":"use latex: https://matplotlib.org/stable/tutorials/text/usetex.html","text":"<p>font.family: 'san-serif' 'serif' or 'monospace'</p>"},{"location":"vis/matplot_param/#thatool.vis.matplot_param--font-family-httpstinyurlcomygestjxo","title":"font family: https://tinyurl.com/ygestjxo","text":"<pre><code>    - 'serif': Serifs are small decorative flourishes attached to stroke ends of characters. Fonts such as Times New Roman, Century, Garamond, and Palatino are serif fonts.\n    - 'sans-serif': This means without serif. Fonts such as Helvetica, Arial, Calibri, and DejaVu Sans are sans-serif.\n    - 'monospace': Monospace fonts have characters of the same width. They are usually used for code.\n    - 'cursive': Cursive features connected brush strokes, usually in italic, that give a sense of classical elegance.\n    - 'fantasy': Decorative fonts that look funny.\n</code></pre>"},{"location":"vis/matplot_param/#thatool.vis.matplot_param--math-mode-httpstinyurlcomyjttcr2c","title":"Math mode: https://tinyurl.com/yjttcr2c","text":"<pre><code>    #mathtext.fontset: dejavusans  # Should be 'dejavusans' (default), 'dejavuserif', 'cm' (Computer Modern), 'stix',\n# 'stixsans' or 'custom' (unsupported, may go away in the future)\n## \"mathtext.fontset: 'custom\" is defined by the mathtext.bf, .cal, .it, ...\n## settings which map a TeX font name to a fontconfig font pattern.  (These settings are not used for other font sets.)\n#mathtext.bf:  sans:bold\n#mathtext.cal: cursive\n#mathtext.it:  sans:italic\n#mathtext.rm:  sans\n#mathtext.sf:  sans\n#mathtext.tt:  monospace\n#mathtext.fallback: cm  # Select fallback font from ['cm' (Computer Modern), 'stix'\n# 'stixsans'] when a symbol can not be found in one of the\n# custom math fonts. Select 'None' to not perform fallback\n# and replace the missing character by a dummy symbol.\n#mathtext.default: it\n\nExample:\n```py\nfrom thatool.vis         import matplot_style\nimport matplotlib.pyplot as plt\nplt.style.use(matplot_style.light)\n```\n</code></pre>"},{"location":"vis/matplot_style/","title":"matplot_style","text":""},{"location":"vis/matplot_style/#thatool.vis.matplot_style","title":"<code>thatool.vis.matplot_style</code>","text":"<p>Set style for matplotlib</p> <p>New use:</p> <p><pre><code>from thatool.vis         import matplot_style\nimport matplotlib.pyplot as plt\nplt.style.use(matplot_style.light)\n</code></pre> <pre><code>## to see all availabes styles\nmatplot_style.all_types\n</code></pre></p> <p>Old use:</p> <pre><code>from thatool.vis         import matplot_param\nimport matplotlib.pyplot as plt\nplt.rcParams.update(matplot_param.myPARAM)\n</code></pre>"},{"location":"vis/ovito_modifier/","title":"ovito_modifier","text":""},{"location":"vis/ovito_modifier/#thatool.vis.ovito_modifier","title":"<code>thatool.vis.ovito_modifier</code>","text":""},{"location":"vis/ovito_modifier/#thatool.vis.ovito_modifier.scale_RGB_color","title":"<code>scale_RGB_color(RGB = (255, 255, 255))</code>","text":"<p>Function to convert RGB color code from scale 0-255 to scale 0-1.</p> <p>Parameters:</p> Name Type Description Default <code>RGB</code> <code>tuple</code> <p>RGB code in scale 0-255</p> <code>(255, 255, 255)</code> <p>Returns:</p> Name Type Description <code>rgb</code> <code>tuple</code> <p>RGB code in scale 0-1</p> <p>Examples:</p> <pre><code>rgb = scale_RGB_color((255,255,255)))\n</code></pre> See also <ol> <li>rgb-values-to-0-to-1-scale</li> </ol>"},{"location":"vis/ovito_modifier/#thatool.vis.ovito_modifier.mod_set_prop_atom_name","title":"<code>mod_set_prop_atom_name(frame, data)</code>","text":"<p>Modifier to set atom names</p> <p>Examples:</p> <pre><code>from thatool.visual.ovito_modifier import mod_set_prop_atom_name\nfrom ovito.io import import_file\npipeline = import_file(\"test.cfg\")\npipeline.add_to_scene()\n## add mod\ndict_name = {'type_id':[1, 2], 'atom_name':['C', 'H']}\npipeline.modifiers.append(mod_set_prop_atom_name)\n</code></pre> Note <ul> <li>So far, can not a custom argument to modifier, see here. So we need to define a <code>global variable</code> before using this function             <pre><code>dict_name = {'type_id':(1, 2), 'atom_name':('C', 'H')}\n</code></pre></li> <li>Do not use 'return` in modifier</li> <li>the underscore notation mean modifiable version of the quantity in ovito</li> </ul> See also <ol> <li>Pass custom args to modifier</li> <li>ovito.data.Property             - type.id, type.name, type.color, type.radius</li> </ol>"},{"location":"vis/ovito_modifier/#thatool.vis.ovito_modifier.mod_set_prop_atom_color_PMMAori","title":"<code>mod_set_prop_atom_color_PMMAori(frame, data)</code>","text":"<p>Modifier to assign atom colors based on atom_names.</p> <p>Examples:</p> <pre><code>from thatool.visual.ovito_modifier import mod_set_prop_atom_color_PMMAori\nfrom ovito.io import import_file\npipeline = import_file(\"test.cfg\")\npipeline.add_to_scene()\n## add mod\npipeline.modifiers.append(mod_set_prop_atom_color_PMMAori)\n</code></pre>"}]}